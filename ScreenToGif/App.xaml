<Application
    x:Class="ScreenToGif.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:ScreenToGif.Util.Converters;assembly=ScreenToGif.Util"
    xmlns:cx="clr-namespace:ScreenToGif.Util.Converters"
    xmlns:n="clr-namespace:ScreenToGif.Controls"
    xmlns:viewModel="clr-namespace:ScreenToGif.ViewModel"
    DispatcherUnhandledException="App_DispatcherUnhandledException"
    Exit="App_Exit"
    ShutdownMode="OnExplicitShutdown"
    Startup="App_Startup">

    <Application.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Vectors.xaml" />
                <ResourceDictionary Source="/Resources/Glyphs.xaml" />
                <ResourceDictionary Source="/Resources/Backgrounds.xaml" />
                <ResourceDictionary Source="/Resources/Commands.xaml" />
                <ResourceDictionary Source="/Resources/Settings.xaml" />

                <!--  Themes  -->
                <ResourceDictionary Source="/Themes/Colors/VeryDark.xaml" />
                <ResourceDictionary Source="/Themes/Colors/Dark.xaml" />
                <ResourceDictionary Source="/Themes/Colors/Medium.xaml" />
                <ResourceDictionary Source="/Themes/Colors/Light.xaml" />

                <ResourceDictionary Source="/Themes/DataGrid.xaml" />
                <ResourceDictionary Source="/Themes/Button.xaml" />
                <ResourceDictionary Source="/Themes/Common.xaml" />
                <ResourceDictionary Source="/Themes/ComboBox.xaml" />

                <!--  Localizations  -->
                <ResourceDictionary Source="/Resources/Localization/StringResources.ar.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.cs.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.da.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.de.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.el.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.es-AR.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.es.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.fi.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.fr.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.ja.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.he.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.hu.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.ko.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.it.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.nl.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.pl.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.pt.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.pt-PT.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.ru.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.sw.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.sv.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.tr.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.uk.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.vi.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.zh.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.zh-Hant.xaml" />
                <ResourceDictionary Source="/Resources/Localization/StringResources.en.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <viewModel:ApplicationViewModel x:Key="AppViewModel" />

            <!--  Converter  -->
            <BooleanToVisibilityConverter x:Key="Bool2Visibility" />
            <c:InvertedBoolToVisibility x:Key="InvertedBoolToVisibility" />
            <c:CountToBool x:Key="CountToBoolConverter" />
            <c:IntToDecimal x:Key="IntToDecimalConverter" />
            <c:EnumToInt x:Key="EnumToInt" />
            <c:ColorToBrush x:Key="ColorToBrushConverter" />
            <c:ShortcutSelection x:Key="ShortcutSelectionConverter" />
            <c:IntToVisibility x:Key="IntToVisibility" />
            <c:InvertedIntToVisibility x:Key="InvertedIntToVisibility" />
            <c:EnumToVisibility x:Key="EnumToVisibility" />
            <c:InvertedBool x:Key="InvertedBool" />
            <cx:CommandToInputGestureText x:Key="CommandToInputGestureText" />
            <c:EnumToBool x:Key="EnumToBool" />
            <c:InvertedEnumToBool x:Key="InvertedEnumToBool" />
            <c:BoolAndToVisibility x:Key="BoolAndToVisibility" />
            <c:ContentToVisibility x:Key="ContentToVisibility" />
            <c:UriToBitmap x:Key="UriToBitmapConverter" />

            <!--  Effects  -->
            <DropShadowEffect
                x:Key="Shadow.Invariant"
                BlurRadius="0"
                Opacity="0"
                RenderingBias="Performance"
                ShadowDepth="0"
                Color="Transparent" />

            <!--  Notification Icon  -->
            <n:NotifyIcon
                x:Key="NotifyIcon"
                DataContext="{StaticResource AppViewModel}"
                DoubleLeftClickCommand="{Binding TrayDoubleLeftClick}"
                IconSource="/Resources/Logo.ico"
                LeftClickCommand="{Binding TrayLeftClick}"
                MiddleClickCommand="{Binding TrayMiddleClick}"
                NotifyToolTipText="ScreenToGif"
                Visibility="Collapsed">
                <n:NotifyIcon.ContextMenu>

                    <ContextMenu>
                        <n:ExtendedMenuItem
                            Command="{Binding OpenRecorder}"
                            Header="{StaticResource S.NewRecording}"
                            Icon="{StaticResource Vector.Record.New}"
                            InputGestureText="{Binding RecorderGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.NewRecording" />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenWebcamRecorder}"
                            Header="{StaticResource S.NewWebcamRecording}"
                            Icon="{StaticResource Vector.Camera.New}"
                            InputGestureText="{Binding WebcamRecorderGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.NewWebcamRecording" />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenBoardRecorder}"
                            Header="{StaticResource S.NewBoardRecording}"
                            Icon="{StaticResource Vector.Board.New}"
                            InputGestureText="{Binding BoardRecorderGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.NewBoardRecording" />
                        <Separator />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenEditor}"
                            Header="{StaticResource S.StartUp.Editor}"
                            Icon="{StaticResource Vector.Editor}"
                            InputGestureText="{Binding EditorGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.StartUp.Editor" />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenOptions}"
                            Header="{StaticResource S.StartUp.Options}"
                            Icon="{StaticResource Vector.Options}"
                            InputGestureText="{Binding OptionsGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.StartUp.Options" />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenFeedback}"
                            Header="{StaticResource S.Feedback.Feedback}"
                            Icon="{StaticResource Vector.Application}"
                            Tag="S.Feedback.Feedback" />
                        <n:ExtendedMenuItem
                            Command="{Binding OpenTroubleshoot}"
                            Header="{StaticResource S.Troubleshoot.Title}"
                            Icon="{StaticResource Vector.Warning}"
                            Tag="S.Troubleshoot.Title" />
                        <Separator />
                        <n:ExtendedMenuItem
                            Command="{Binding ExitApplication}"
                            Header="{StaticResource S.Exit}"
                            Icon="{StaticResource Vector.Close}"
                            InputGestureText="{Binding ExitGesture, UpdateSourceTrigger=PropertyChanged}"
                            Tag="S.Exit" />
                    </ContextMenu>
                </n:NotifyIcon.ContextMenu>
            </n:NotifyIcon>

            <Style x:Key="Style.FocusVisual.NoMargin">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle
                                    Margin="0"
                                    SnapsToDevicePixels="True"
                                    Stroke="{DynamicResource Element.Foreground}"
                                    StrokeDashArray="1,2"
                                    StrokeThickness="1" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--  RadioButton  -->
            <Style TargetType="{x:Type RadioButton}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisual.NoMargin}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="2,0,0,0" />
                <Setter Property="BorderThickness" Value="1" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <Grid
                                x:Name="templateRoot"
                                Background="Transparent"
                                SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Border
                                    x:Name="radioButtonBorder"
                                    Margin="1,1,2,1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="100">
                                    <Grid
                                        x:Name="markGrid"
                                        Margin="2">
                                        <Ellipse
                                            x:Name="optionMark"
                                            MinWidth="6"
                                            MinHeight="6"
                                            Fill="{DynamicResource Element.Glyph}"
                                            Opacity="0" />
                                    </Grid>
                                </Border>

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                                    <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ToolTip  -->
            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="MinWidth" Value="20" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Effect" Value="{DynamicResource Shadow.Border.Dark}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Border
                                Margin="2"
                                Padding="5"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                TextBlock.Foreground="{TemplateBinding Foreground}">
                                <ContentPresenter
                                    Width="Auto"
                                    HorizontalAlignment="Center"
                                    Content="{TemplateBinding Content}"
                                    TextBlock.Foreground="{TemplateBinding Foreground}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ContextMenu  -->
            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Grid.IsSharedSizeScope" Value="True" />
                <Setter Property="Placement" Value="Bottom" />
                <Setter Property="HorizontalOffset" Value="-5" />
                <Setter Property="Effect" Value="{DynamicResource Shadow.Border.Dark}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border
                                x:Name="Border"
                                Margin="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1">
                                <StackPanel
                                    IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Separator  -->
            <Style TargetType="{x:Type Separator}">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Light}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Rectangle
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Fill="{TemplateBinding BorderBrush}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  LabelSeparator  -->
            <Style
                x:Key="LabelSeparator"
                TargetType="{x:Type Label}">
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Padding" Value="3,1" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Light}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Label}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Label
                                    Padding="{TemplateBinding Padding}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding Content}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    Foreground="{TemplateBinding Foreground}" />

                                <Rectangle
                                    Grid.Column="1"
                                    Height="{TemplateBinding BorderThickness}"
                                    Margin="5,0,0,0"
                                    VerticalAlignment="Center"
                                    Fill="{TemplateBinding BorderBrush}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ScrollBar Styles  -->
            <Style
                x:Key="ScrollBar.Button"
                TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid
                                x:Name="Root"
                                Margin="0">
                                <Border
                                    x:Name="BackgroundBorder"
                                    Background="{DynamicResource Brush.ScrollBar.Background}"
                                    BorderBrush="{DynamicResource Brush.ScrollBar.Border}"
                                    BorderThickness="1" />
                                <Path
                                    x:Name="Arrow"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                                    Fill="{DynamicResource Element.Glyph}"
                                    SnapsToDevicePixels="True"
                                    Stretch="None" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Brush.ScrollBar.Background.Hover}" />
                                    <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Border.Hover}" />
                                    <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Brush.ScrollBar.Background.Pressed}" />
                                    <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Border.Pressed}" />
                                    <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="ScrollBar.Thumb"
                TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Border}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid Background="Transparent">
                                <Border
                                    Margin="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Background.Hover}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Border.Hover}" />
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Background.Pressed}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Border.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="ScrollBar.Transparent"
                TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Fill="{TemplateBinding Background}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Background.Back}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ScrollBar.Background.Back}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="BorderThickness" Value="1,0" />
                <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid
                                x:Name="Bg"
                                SnapsToDevicePixels="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                    <RowDefinition Height="0.00001*" />
                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                </Grid.RowDefinitions>

                                <RepeatButton
                                    x:Name="PART_LineUpButton"
                                    Grid.Row="0"
                                    Command="{x:Static ScrollBar.LineUpCommand}"
                                    Content="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Style="{StaticResource ScrollBar.Button}" />

                                <Border
                                    Grid.Row="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                                <Track
                                    x:Name="PART_Track"
                                    Grid.Row="1"
                                    IsDirectionReversed="True"
                                    IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton
                                            Command="{x:Static ScrollBar.PageUpCommand}"
                                            Style="{StaticResource ScrollBar.Transparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton
                                            Command="{x:Static ScrollBar.PageDownCommand}"
                                            Style="{StaticResource ScrollBar.Transparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBar.Thumb}" />
                                    </Track.Thumb>
                                </Track>

                                <RepeatButton
                                    x:Name="PART_LineDownButton"
                                    Grid.Row="2"
                                    Command="{x:Static ScrollBar.LineDownCommand}"
                                    Content="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Style="{StaticResource ScrollBar.Button}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Bg" Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto" />
                        <Setter Property="MinWidth" Value="0" />
                        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                        <Setter Property="BorderThickness" Value="0,1" />

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid
                                        x:Name="Bg"
                                        SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                            <ColumnDefinition Width="0.00001*" />
                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                        </Grid.ColumnDefinitions>

                                        <RepeatButton
                                            x:Name="PART_LineLeftButton"
                                            Grid.Column="0"
                                            Command="{x:Static ScrollBar.LineLeftCommand}"
                                            Content="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
                                            IsEnabled="{TemplateBinding IsMouseOver}"
                                            Style="{StaticResource ScrollBar.Button}" />

                                        <Border
                                            Grid.Column="1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}" />
                                        <Track
                                            x:Name="PART_Track"
                                            Grid.Column="1"
                                            IsEnabled="{TemplateBinding IsMouseOver}">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton
                                                    Command="{x:Static ScrollBar.PageLeftCommand}"
                                                    Style="{StaticResource ScrollBar.Transparent}" />
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton
                                                    Command="{x:Static ScrollBar.PageRightCommand}"
                                                    Style="{StaticResource ScrollBar.Transparent}" />
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBar.Thumb}" />
                                            </Track.Thumb>
                                        </Track>

                                        <RepeatButton
                                            x:Name="PART_LineRightButton"
                                            Grid.Column="2"
                                            Command="{x:Static ScrollBar.LineRightCommand}"
                                            Content="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
                                            IsEnabled="{TemplateBinding IsMouseOver}"
                                            Style="{StaticResource ScrollBar.Button}" />
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="Bg" Property="Opacity" Value="0.6" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--  ScrollViewer  -->
            <Style TargetType="{x:Type ScrollViewer}">
                <!--<Setter Property="PanningRatio" Value="0.01"/>
                <Setter Property="PanningDeceleration" Value="0.1"/>
                <Setter Property="CanContentScroll" Value="True"/>-->

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid
                                x:Name="Grid"
                                Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter
                                    x:Name="PART_ScrollContentPresenter"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Margin="{TemplateBinding Padding}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False"
                                    CanVerticallyScroll="False"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" />

                                <ScrollBar
                                    x:Name="PART_VerticalScrollBar"
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    AutomationProperties.AutomationId="VerticalScrollBar"
                                    Cursor="Arrow"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    Minimum="0"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                <Rectangle
                                    x:Name="Corner"
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    Fill="{DynamicResource Element.Background.Back}" />

                                <ScrollBar
                                    x:Name="PART_HorizontalScrollBar"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    AutomationProperties.AutomationId="HorizontalScrollBar"
                                    Cursor="Arrow"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    Minimum="0"
                                    Orientation="Horizontal"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Corner" Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Expander Style  -->
            <Style
                x:Key="ExpanderRightHeaderStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter Property="Padding" Value="0" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                                <Grid SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="19" />
                                    </Grid.RowDefinitions>

                                    <Label
                                        Grid.Row="0"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        Foreground="{TemplateBinding Foreground}" />

                                    <Rectangle
                                        x:Name="HorizontalRectangle"
                                        Grid.Row="1"
                                        Height="Auto"
                                        MinHeight="1"
                                        Margin="3,0,3,0"
                                        HorizontalAlignment="Center"
                                        Fill="{DynamicResource Element.Border.Light}" />

                                    <Path
                                        x:Name="ArrowPath"
                                        Grid.Row="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Data="M 1,1  L 4.5,4.5  L 1,8"
                                        SnapsToDevicePixels="False"
                                        Stroke="{DynamicResource Element.Glyph}"
                                        StrokeThickness="2" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ArrowPath" Property="Data" Value="M 4.5,1  L 1,4.5  L 4.5,8" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="ExpanderLeftHeaderStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter Property="Padding" Value="0" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                                <Grid SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="19" />
                                    </Grid.RowDefinitions>

                                    <Label
                                        Grid.Row="0"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        Foreground="{TemplateBinding Foreground}" />

                                    <Rectangle
                                        x:Name="HorizontalRectangle"
                                        Grid.Row="1"
                                        Height="Auto"
                                        MinHeight="1"
                                        Margin="3,0,3,0"
                                        HorizontalAlignment="Center"
                                        Fill="{DynamicResource Element.Border.Light}" />

                                    <Path
                                        x:Name="ArrowPath"
                                        Grid.Row="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Data="M 4.5,1  L 1,4.5  L 4.5,8"
                                        SnapsToDevicePixels="False"
                                        Stroke="{DynamicResource Element.Glyph}"
                                        StrokeThickness="2" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ArrowPath" Property="Data" Value="M 1,1  L 4.5,4.5  L 1,8" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="ExpanderUpHeaderStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter Property="Height" Value="27" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                                <Grid SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="19" />
                                    </Grid.ColumnDefinitions>

                                    <Label
                                        Grid.Column="0"
                                        Padding="3"
                                        VerticalContentAlignment="Center"
                                        Content="{TemplateBinding Content}"
                                        Foreground="{TemplateBinding Foreground}" />

                                    <Rectangle
                                        x:Name="HorizontalRectangle"
                                        Grid.Column="1"
                                        Height="Auto"
                                        MinHeight="1"
                                        Margin="3,0,3,0"
                                        VerticalAlignment="Center"
                                        Fill="{DynamicResource Element.Border.Light}" />

                                    <Path
                                        x:Name="ArrowPath"
                                        Grid.Column="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Data="M 1,4.5 L 4.5,1 L 8,4.5"
                                        SnapsToDevicePixels="False"
                                        Stroke="{DynamicResource Element.Glyph}"
                                        StrokeThickness="2" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ArrowPath" Property="Data" Value="M 1,1.5 L 4.5,5 L 8,1.5" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="ExpanderDownHeaderStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                                <Grid SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="19" />
                                    </Grid.ColumnDefinitions>

                                    <Label
                                        Grid.Column="0"
                                        Padding="3"
                                        VerticalContentAlignment="Center"
                                        Content="{TemplateBinding Content}"
                                        Foreground="{TemplateBinding Foreground}" />

                                    <Rectangle
                                        x:Name="HorizontalRectangle"
                                        Grid.Column="1"
                                        Height="Auto"
                                        MinHeight="1"
                                        Margin="3,0,3,0"
                                        VerticalAlignment="Center"
                                        Fill="{DynamicResource Element.Border.Light}" />

                                    <Path
                                        x:Name="ArrowPath"
                                        Grid.Column="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                        SnapsToDevicePixels="False"
                                        Stroke="{DynamicResource Element.Glyph}"
                                        StrokeThickness="2" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ArrowPath" Property="Data" Value="M 1,4.5 L 4.5,1 L 8,4.5" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Hover}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="HorizontalRectangle" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                    <Setter TargetName="ArrowPath" Property="Stroke" Value="{DynamicResource Element.Glyph.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <DockPanel>
                                    <ToggleButton
                                        x:Name="HeaderSite"
                                        Margin="0"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                        DockPanel.Dock="Top"
                                        FocusVisualStyle="{StaticResource Style.FocusVisual.NoMargin}"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontStretch="{TemplateBinding FontStretch}"
                                        FontStyle="{TemplateBinding FontStyle}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        Foreground="{TemplateBinding Foreground}"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource ExpanderDownHeaderStyle}" />

                                    <ContentPresenter
                                        x:Name="ExpandSite"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        DockPanel.Dock="Bottom"
                                        Focusable="False"
                                        Visibility="Collapsed" />
                                </DockPanel>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
                                    <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                                    <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}" />
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
                                    <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                                    <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}" />
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
                                    <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                                    <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="HeaderSite" Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Slider  -->
            <Style TargetType="{x:Type Slider}">
                <Setter Property="TickPlacement" Value="BottomRight" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Slider">
                            <Grid x:Name="Root">
                                <Grid x:Name="HorizontalTemplate">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition
                                            Height="Auto"
                                            MinHeight="{TemplateBinding MinHeight}" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <TickBar
                                        x:Name="TopTick"
                                        Grid.Row="0"
                                        Height="4"
                                        Margin="0,0,0,2"
                                        Fill="{TemplateBinding BorderBrush}"
                                        Placement="Top"
                                        TickFrequency="1"
                                        Visibility="Collapsed" />
                                    <TickBar
                                        x:Name="BottomTick"
                                        Grid.Row="2"
                                        Height="4"
                                        Margin="0,1,0,0"
                                        Fill="{TemplateBinding BorderBrush}"
                                        Placement="Bottom"
                                        TickFrequency="1"
                                        Visibility="Collapsed" />

                                    <Border
                                        x:Name="TrackBorder"
                                        Grid.Row="1"
                                        Height="3"
                                        Margin="4,0"
                                        VerticalAlignment="Center"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1">
                                        <Canvas Margin="-6,-1">
                                            <Rectangle
                                                x:Name="PART_SelectionRange"
                                                Height="4.0"
                                                Fill="{DynamicResource Brush.ProgressBar.Info}"
                                                Visibility="Hidden" />
                                        </Canvas>
                                    </Border>

                                    <Track
                                        x:Name="PART_Track"
                                        Grid.Row="1">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton
                                                x:Name="HorizontalTrackLargeChangeDecreaseRepeatButton"
                                                Background="Transparent"
                                                IsTabStop="False"
                                                Template="{StaticResource Template.RepeatButton.Simple}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton
                                                x:Name="HorizontalTrackLargeChangeIncreaseRepeatButton"
                                                Background="Transparent"
                                                IsTabStop="False"
                                                Template="{StaticResource Template.RepeatButton.Simple}" />
                                        </Track.IncreaseRepeatButton>

                                        <Track.Thumb>
                                            <Thumb
                                                x:Name="HorizontalThumb"
                                                Width="10"
                                                Height="18"
                                                Template="{StaticResource Template.Slider.Thumb.Horizontal}" />
                                        </Track.Thumb>
                                    </Track>
                                </Grid>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter TargetName="HorizontalThumb" Property="Template" Value="{StaticResource Template.Slider.Thumb.Bottom}" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter TargetName="HorizontalThumb" Property="Template" Value="{StaticResource Template.Slider.Thumb.Top}" />
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Hyperlink  -->
            <Style
                x:Key="{x:Type Hyperlink}"
                TargetType="{x:Type Hyperlink}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink}" />
                <Setter Property="TextDecorations" Value="Underline" />

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink.Hover}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink.Disabled}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="True">
                        <Setter Property="Cursor" Value="Hand" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--  ProgressBar  -->
            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.ProgressBar.Primary}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background.Back}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="BorderThickness" Value="1" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid x:Name="TemplateRoot">
                                <Border
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                                <Rectangle x:Name="PART_Track" />

                                <Grid
                                    x:Name="PART_Indicator"
                                    HorizontalAlignment="Left"
                                    ClipToBounds="True">
                                    <Rectangle
                                        x:Name="Indicator"
                                        Fill="{TemplateBinding Foreground}" />
                                    <Rectangle
                                        x:Name="Animation"
                                        Fill="{TemplateBinding Foreground}"
                                        RenderTransformOrigin="0.5,0.5">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                                <SkewTransform />
                                                <RotateTransform />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Determinate" />
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard RepeatBehavior="Forever">
                                                <DoubleAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Animation"
                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                    <EasingDoubleKeyFrame
                                                        KeyTime="0"
                                                        Value="0.25" />
                                                    <EasingDoubleKeyFrame
                                                        KeyTime="0:0:1"
                                                        Value="0.25" />
                                                    <EasingDoubleKeyFrame
                                                        KeyTime="0:0:2"
                                                        Value="0.25" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <PointAnimationUsingKeyFrames
                                                    Storyboard.TargetName="Animation"
                                                    Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                    <EasingPointKeyFrame
                                                        KeyTime="0"
                                                        Value="-0.5,0.5" />
                                                    <EasingPointKeyFrame
                                                        KeyTime="0:0:1"
                                                        Value="0.5,0.5" />
                                                    <EasingPointKeyFrame
                                                        KeyTime="0:0:2"
                                                        Value="1.5,0.5" />
                                                </PointAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="Orientation" Value="Vertical">
                                    <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsIndeterminate" Value="True">
                                    <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ListBox  -->
            <Style TargetType="{x:Type ListBox}">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Border
                                x:Name="Bd"
                                Padding="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <ScrollViewer
                                    Padding="{TemplateBinding Padding}"
                                    Focusable="False">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True" />
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ListView  -->
            <Style TargetType="{x:Type ListView}">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <Border
                                x:Name="Bd"
                                Padding="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <ScrollViewer
                                    Padding="{TemplateBinding Padding}"
                                    Focusable="False">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True" />
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  ComboBoxItem  -->
            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Padding" Value="4,1" />
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisual.NoMargin}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border
                                x:Name="Bd"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Bd" Property="Opacity" Value="0.7" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsKeyboardFocused" Value="False" />
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                        <Condition Property="IsKeyboardFocused" Value="False" />
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsKeyboardFocused" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  PasswordBox Style  -->
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="MinHeight" Value="23" />
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="AllowDrop" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                            <Border
                                x:Name="border"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                MinWidth="{TemplateBinding MinWidth}"
                                MinHeight="{TemplateBinding MinHeight}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <Grid x:Name="InnerGrid">
                                    <ScrollViewer
                                        x:Name="PART_ContentHost"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Focusable="False"
                                        HorizontalScrollBarVisibility="Hidden"
                                        VerticalScrollBarVisibility="Hidden" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Opacity" Value="0.7" />
                                </Trigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                                </Trigger>

                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Custom styles  -->

            <!--  ListView - Frames  -->
            <Style
                x:Key="Style.ListView.Frames"
                TargetType="{x:Type ListView}">
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="VerticalContentAlignment" Value="Center" />

                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel
                                MinHeight="0"
                                IsVirtualizing="True"
                                Orientation="Horizontal"
                                VirtualizationMode="Recycling" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="Padding" Value="4,1" />
                            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual.NoMargin}" />

                            <Style.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
                                </MultiTrigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>

                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Border
                                x:Name="Bd"
                                MinWidth="80"
                                Padding="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=Padding}"
                                Background="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=Background}"
                                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=BorderBrush}"
                                BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=BorderThickness}"
                                SnapsToDevicePixels="True">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Viewbox
                                        x:Name="ViewBoxInternal"
                                        MaxWidth="100"
                                        MaxHeight="100"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Effect="{x:Null}"
                                        Stretch="Uniform"
                                        StretchDirection="Both">
                                        <Image
                                            Width="Auto"
                                            Height="Auto"
                                            Effect="{DynamicResource Shadow.Border.Large}"
                                            Source="{Binding Image, Converter={StaticResource UriToBitmapConverter}, ConverterParameter=100}" />
                                    </Viewbox>

                                    <Grid Grid.Row="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>

                                        <TextBlock
                                            x:Name="NumberLabel"
                                            Margin="0"
                                            Padding="0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource Element.Foreground.Gray112}"
                                            Text="{Binding Number, StringFormat={}{0:0}}" />

                                        <TextBlock
                                            x:Name="DelayLabel"
                                            Grid.Column="1"
                                            Margin="0"
                                            Padding="0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            FontSize="11"
                                            FontStyle="Italic"
                                            FontWeight="Normal"
                                            Foreground="{DynamicResource Element.Foreground.Gray112}"
                                            Text="{Binding Delay, StringFormat={}{0:0 'ms'}}" />
                                    </Grid>
                                </Grid>
                            </Border>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <Border
                                x:Name="Bd"
                                Padding="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <ScrollViewer
                                    Padding="{TemplateBinding Padding}"
                                    CanContentScroll="True"
                                    Focusable="False">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True" />
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                                    </MultiTrigger.Conditions>

                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Integer Up/Down - Minimal  -->
            <Style
                x:Key="IntegerUpDown.Minimal"
                TargetType="{x:Type n:IntegerUpDown}">
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type n:IntegerUpDown}">
                            <Border
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                MinWidth="{TemplateBinding MinWidth}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid Background="{TemplateBinding Background}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition
                                            Width="55*"
                                            MinWidth="24" />
                                        <ColumnDefinition
                                            x:Name="SecondColumn"
                                            Width="45*"
                                            MinWidth="18"
                                            MaxWidth="25" />
                                    </Grid.ColumnDefinitions>

                                    <ScrollViewer
                                        x:Name="PART_ContentHost"
                                        Grid.Row="0"
                                        Grid.RowSpan="2"
                                        Grid.Column="0"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Focusable="False"
                                        HorizontalScrollBarVisibility="Hidden"
                                        VerticalScrollBarVisibility="Hidden" />

                                    <RepeatButton
                                        x:Name="UpButton"
                                        Grid.Row="0"
                                        Grid.Column="1"
                                        Margin="0"
                                        Padding="0"
                                        VerticalContentAlignment="Center"
                                        BorderThickness="0"
                                        Content="▲"
                                        Focusable="False"
                                        FontSize="7"
                                        IsTabStop="False"
                                        Style="{StaticResource Style.RepeatButton}" />

                                    <RepeatButton
                                        x:Name="DownButton"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Margin="0"
                                        Padding="0"
                                        VerticalContentAlignment="Center"
                                        BorderThickness="0"
                                        Content="▼"
                                        Focusable="False"
                                        FontSize="7"
                                        IsTabStop="False"
                                        Style="{StaticResource Style.RepeatButton}" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.6" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--  Round Thumb  -->
            <Style
                x:Key="Style.Thumb.Ellipse"
                TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Background" Value="{DynamicResource Element.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid Background="Transparent">
                                <Ellipse
                                    Margin="{TemplateBinding Padding}"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeThickness="1" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Viewbox  -->
            <Style
                x:Key="Style.ViewBox"
                TargetType="{x:Type Viewbox}">
                <Setter Property="Opacity" Value="{DynamicResource Element.Opacity}" />

                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.7" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--  Transparent Thumb Style, used by the cropping adorner  -->
            <Style
                x:Key="ThumbTranparent"
                TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid Background="Transparent">
                                <Border
                                    Margin="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Cursor" Value="SizeAll" />
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Setter Property="Background" Value="#10000000" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>