<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:ScreenToGif.Controls"
    xmlns:v="clr-namespace:ScreenToGif.Util.Converters;assembly=ScreenToGif.Util">

    <!--  ComboBox Style  -->
    <Style
        x:Key="Style.ToggleButton.ComboBox"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{DynamicResource Element.Background}"
                        BorderBrush="{DynamicResource Element.Border}"
                        BorderThickness="1">
                        <Border
                            x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                            <Path
                                x:Name="arrow"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                Fill="{DynamicResource Element.Glyph}" />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Element.Glyph.Hover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Element.Glyph.Pressed}" />
                        </Trigger>

                        <!--  Editable, !Hovered  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Element.Border}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                        </MultiDataTrigger>

                        <!--  Editable, Hovered  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                        </MultiDataTrigger>

                        <!--  Editable, Pressed  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                        </MultiDataTrigger>

                        <!--  !Editable, Hovered  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                        </MultiDataTrigger>

                        <!--  !Editable, Pressed  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="Style.TextBox.ComboBoxEditable"
        TargetType="{x:Type c:ExtendedTextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="CaretBrush" Value="{DynamicResource Element.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type c:ExtendedTextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent"
                        Focusable="False"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate
        x:Key="Template.ComboBox"
        TargetType="{x:Type ComboBox}">
        <Grid
            x:Name="templateRoot"
            SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition
                    Width="0"
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>

            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="True"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                <Border
                    x:Name="DropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Background="{DynamicResource Element.Background}"
                    BorderBrush="{DynamicResource Element.Border}"
                    BorderThickness="1"
                    Effect="{DynamicResource Shadow.Border}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <ItemsPresenter
                            x:Name="ItemsPresenter"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ScrollViewer>
                </Border>
            </Popup>

            <ToggleButton
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Style.ToggleButton.ComboBox}" />

            <ContentPresenter
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="False"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate
        x:Key="Template.ComboBox.Editable"
        TargetType="{x:Type ComboBox}">
        <Grid
            x:Name="templateRoot"
            SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition
                    Width="0"
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>

            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="True"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                <Border
                    x:Name="DropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Background="{DynamicResource Element.Background}"
                    BorderBrush="{DynamicResource Element.Border}"
                    BorderThickness="1"
                    Effect="{DynamicResource Shadow.Border}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <ItemsPresenter
                            x:Name="ItemsPresenter"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ScrollViewer>
                </Border>
            </Popup>

            <ToggleButton
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Style.ToggleButton.ComboBox}" />

            <c:ExtendedTextBox
                x:Name="PART_EditableTextBox"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Style.TextBox.ComboBoxEditable}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_EditableTextBox" Property="Opacity" Value="0.7" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual.NoMargin}" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource Template.ComboBox}" />

        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template" Value="{StaticResource Template.ComboBox.Editable}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ComboBoxButton Style  -->
    <Style
        x:Key="DropDownToggleButton"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Background" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="templateRoot"
                        MinHeight="{TemplateBinding MinHeight}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  DropDownButton styles  -->
    <ControlTemplate
        x:Key="Template.DropDownButton.Horizontal"
        TargetType="{x:Type c:DropDownButton}">
        <Grid
            x:Name="templateRoot"
            SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition
                    Width="0"
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>

            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="True"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                <Border
                    x:Name="DropDownBorder"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Background="{DynamicResource Element.Background}"
                    BorderBrush="{DynamicResource Element.Border}"
                    BorderThickness="1"
                    Effect="{DynamicResource Shadow.Border}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <ItemsPresenter
                            x:Name="ItemsPresenter"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ScrollViewer>
                </Border>
            </Popup>

            <ToggleButton
                Grid.Column="0"
                Grid.ColumnSpan="3"
                HorizontalContentAlignment="Right"
                VerticalContentAlignment="Center"
                Background="{TemplateBinding Background}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                IsEnabled="{TemplateBinding IsEnabled}"
                Style="{StaticResource DropDownToggleButton}" />

            <Border
                Grid.Column="0"
                Width="{TemplateBinding MaxSize}"
                Height="{TemplateBinding MaxSize}"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="{TemplateBinding Icon}"
                IsEnabled="{TemplateBinding IsEnabled}" />

            <TextBlock
                x:Name="TextBlockInternal"
                Grid.Column="1"
                MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="Center"
                Effect="{TemplateBinding Effect}"
                IsHitTestVisible="False"
                Text="{TemplateBinding Description}"
                TextWrapping="WrapWithOverflow" />

            <Path
                Grid.Column="2"
                Width="6"
                Height="5"
                VerticalAlignment="Center"
                Data="F1 M 0,1.7 L 3,5 L 6,1.7 L 6,0 L 3,3.2 L0,0 Z"
                Fill="{DynamicResource Element.Glyph}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate
        x:Key="Template.DropDownButton.Vertical"
        TargetType="{x:Type c:DropDownButton}">
        <Grid
            x:Name="templateRoot"
            SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="True"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Grid
                    x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Background="Transparent">
                    <Border
                        x:Name="DropDownBorder"
                        Margin="0,0,0,5"
                        Background="{DynamicResource Element.Background}"
                        BorderBrush="{DynamicResource Element.Border}"
                        BorderThickness="1"
                        Effect="{DynamicResource Shadow.Border}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid
                                x:Name="grid"
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Fill="{Binding Background, ElementName=DropDownBorder}" />
                                </Canvas>

                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>

            <ToggleButton
                Grid.Row="0"
                Grid.RowSpan="3"
                Background="{TemplateBinding Background}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                IsEnabled="{TemplateBinding IsEnabled}"
                Style="{StaticResource DropDownToggleButton}" />

            <Border
                Grid.Column="0"
                Width="{TemplateBinding MaxSize}"
                Height="{TemplateBinding MaxSize}"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="{TemplateBinding Icon}"
                IsEnabled="{TemplateBinding IsEnabled}" />

            <TextBlock
                x:Name="TextBlockInternal"
                Grid.Row="1"
                MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="Center"
                Effect="{TemplateBinding Effect}"
                IsHitTestVisible="False"
                Text="{TemplateBinding Description}"
                TextWrapping="WrapWithOverflow" />

            <Path
                Grid.Row="2"
                Width="6"
                Height="5"
                Margin="0,4"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="F1 M 0,1.7 L 3,5 L 6,1.7 L 6,0 L 3,3.2 L0,0 Z"
                Fill="{DynamicResource Element.Glyph}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>

            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type c:DropDownButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisual.NoMargin}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsEditable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource Template.DropDownButton.Horizontal}" />

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
            <Trigger Property="IsVertical" Value="True">
                <Setter Property="Template" Value="{StaticResource Template.DropDownButton.Vertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Common Templates  -->
    <DataTemplate x:Key="Template.ComboBox.Simple">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="33" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Border
                x:Name="IconBorder"
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="30"
                Height="22"
                Margin="1,1,4,1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="{Binding ImageId, Converter={StaticResource StringToStaticResource}}" />

            <Separator
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="1"
                Width="1"
                Margin="0" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="2"
                Margin="10,0,2,0"
                VerticalAlignment="Center"
                Foreground="{DynamicResource Element.Foreground.Medium}"
                Text="{Binding Title}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="2"
                Margin="10,0,2,0"
                VerticalAlignment="Center"
                FontSize="11"
                Foreground="{DynamicResource Element.Foreground.Gray112}"
                Text="{Binding Description}"
                TextTrimming="CharacterEllipsis" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="Template.ComboBox.SimpleNoIcon">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <TextBlock
                Grid.Row="0"
                Margin="10,0,2,0"
                VerticalAlignment="Center"
                Foreground="{DynamicResource Element.Foreground.Medium}"
                Text="{Binding Title}" />
            <TextBlock
                Grid.Row="1"
                Margin="10,0,2,0"
                VerticalAlignment="Center"
                FontSize="11"
                Foreground="{DynamicResource Element.Foreground.Gray112}"
                Text="{Binding Description}"
                TextTrimming="CharacterEllipsis" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="Template.ComboBox.Item">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Column="0"
                Margin="1,1,5,1"
                VerticalAlignment="Center"
                Foreground="{DynamicResource Element.Foreground}">
                <TextBlock.Text>
                    <PriorityBinding>
                        <Binding
                            Converter="{StaticResource StringToStaticResource}"
                            Path="NameKey" />
                        <Binding Path="Name" />
                    </PriorityBinding>
                </TextBlock.Text>
            </TextBlock>

            <Separator
                Grid.Column="1"
                Width="1"
                Margin="0" />

            <TextBlock
                Grid.Column="2"
                Margin="5,1,3,1"
                VerticalAlignment="Center"
                FontSize="11"
                Foreground="{DynamicResource Element.Foreground.Gray112}"
                TextTrimming="CharacterEllipsis">
                <TextBlock.Text>
                    <PriorityBinding>
                        <Binding Path="Parameter" />
                        <Binding Path="Command" />
                    </PriorityBinding>
                </TextBlock.Text>
            </TextBlock>
        </Grid>
    </DataTemplate>
</ResourceDictionary>