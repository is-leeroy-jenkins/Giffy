<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="clr-namespace:ScreenToGif.Util.Converters;assembly=ScreenToGif.Util"
    xmlns:e="clr-namespace:ScreenToGif.Domain.Enums;assembly=ScreenToGif.Domain"
    xmlns:n="clr-namespace:ScreenToGif.Controls"
    xmlns:s="clr-namespace:System;assembly=mscorlib"
    xmlns:t="clr-namespace:ScreenToGif.Util.Settings;assembly=ScreenToGif.Util">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ScreenToGif;component/Themes/Common.xaml" />
        <ResourceDictionary Source="/ScreenToGif;component/Themes/EncoderListViewItem.xaml" />
        <ResourceDictionary Source="/ScreenToGif;component/Themes/Controls/ExtendedComboBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  Converters  -->
    <BooleanToVisibilityConverter x:Key="Bool2VisibilityConverterGeneric" />
    <c:StringToInt x:Key="StringToInt" />
    <c:ContentToVisibility x:Key="ContentToVisibility" />
    <c:UriToBitmap x:Key="UriToBitmapConverter" />
    <c:IntToDelayString x:Key="IntToDelayStringConverter" />
    <c:DoubleToPercentage x:Key="DoubleToPercentageConverter" />
    <c:BytesToSize x:Key="BytesToSizeConverter" />
    <c:ColorToAlpha x:Key="ColorToAlphaConverter" />
    <c:IntToString x:Key="IntToStringConverter" />
    <c:MultiLineTitle x:Key="MultiLineTitleConverter" />
    <c:KeysToString x:Key="KeysToString" />
    <c:IntToRect x:Key="IntToRect" />
    <c:ColorToBrush x:Key="ColorToBrush" />
    <c:InvertedBool x:Key="InvertedBool" />
    <c:ScaleConverter x:Key="ScaleConverter" />
    <c:CenterPopupConverter x:Key="CenterPopupConverter" />
    <c:BoolAndToVisibility x:Key="BoolAndToVisibility" />
    <c:IntToBool x:Key="IntToBool" />
    <c:EnumToBool x:Key="EnumToBool" />
    <c:TimeSpanToTotalMilliseconds x:Key="TimeSpanToTotalMilliseconds" />
    <c:TimeSpanToString x:Key="TimeSpanToString" />

    <!--  Window Style  -->
    <Style TargetType="{x:Type n:LightWindow}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="Background" Value="{DynamicResource Panel.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Light}" />
        <Setter Property="MinHeight" Value="100" />
        <Setter Property="MinWidth" Value="180" />
        <Setter Property="Title" Value="ScreenToGif" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:LightWindow}">
                    <Border
                        x:Name="MainBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <AdornerDecorator>
                            <Grid
                                x:Name="MainGrid"
                                Background="{x:Null}">
                                <Grid.RowDefinitions>
                                    <RowDefinition
                                        x:Name="FirstRow"
                                        Height="5" />
                                    <RowDefinition
                                        x:Name="SecondRow"
                                        Height="25" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Grid
                                    x:Name="TopGrid"
                                    Grid.Row="0"
                                    Grid.RowSpan="2"
                                    Grid.Column="1"
                                    Background="{TemplateBinding Background}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock
                                        x:Name="CaptionText"
                                        Grid.Column="0"
                                        Margin="5,0,0,0"
                                        VerticalAlignment="Center"
                                        FontFamily="Segoe UI"
                                        FontSize="16"
                                        FontWeight="Regular"
                                        Foreground="{TemplateBinding Foreground}"
                                        Text="{TemplateBinding Title}" />

                                    <TextBlock
                                        Grid.Column="1"
                                        Margin="5"
                                        VerticalAlignment="Center"
                                        Foreground="{DynamicResource Element.Foreground.Gray112}"
                                        Text="{DynamicResource S.Recorder.ClickOrPress}"
                                        TextAlignment="Center">
                                        <TextBlock.Visibility>
                                            <MultiBinding Converter="{StaticResource BoolAndToVisibility}">
                                                <Binding
                                                    Converter="{StaticResource EnumToBool}"
                                                    ConverterParameter="{x:Static e:CaptureFrequencies.Interaction}"
                                                    Path="CaptureFrequency"
                                                    Source="{x:Static t:UserSettings.All}" />
                                                <Binding
                                                    Converter="{StaticResource IntToBool}"
                                                    ConverterParameter="0"
                                                    Path="FrameCount"
                                                    RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </TextBlock.Visibility>
                                    </TextBlock>

                                    <n:DisplayTimer
                                        x:Name="DisplayTimer"
                                        Grid.Column="2"
                                        Margin="5"
                                        Padding="5,0"
                                        CapturedCount="{TemplateBinding FrameCount}"
                                        CornerRadius="3"
                                        IsImpreciseCapture="{TemplateBinding HasImpreciseCapture}" />

                                    <n:ExtendedButton
                                        x:Name="MinimizeButton"
                                        Grid.Column="3"
                                        Width="30"
                                        Padding="6"
                                        ContentHeight="14"
                                        ContentWidth="14"
                                        Icon="{DynamicResource Vector.Minimize}"
                                        Style="{DynamicResource Style.Button.NoText}"
                                        TabIndex="9" />
                                    <n:ExtendedButton
                                        x:Name="CloseButton"
                                        Grid.Column="4"
                                        Width="30"
                                        Padding="6"
                                        ContentHeight="14"
                                        ContentWidth="14"
                                        Icon="{DynamicResource Vector.Close}"
                                        Style="{DynamicResource Style.Button.NoText}"
                                        TabIndex="10" />
                                </Grid>

                                <Rectangle
                                    x:Name="TopLeftRectangle"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Width="5"
                                    Height="5"
                                    Cursor="SizeNWSE"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="TopRectangle"
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    Height="5"
                                    Cursor="SizeNS"
                                    Fill="Transparent"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="TopRightRectangle"
                                    Grid.Row="0"
                                    Grid.Column="2"
                                    Width="5"
                                    Height="5"
                                    Cursor="SizeNESW"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="LeftRectangle"
                                    Grid.Row="1"
                                    Grid.RowSpan="2"
                                    Grid.Column="0"
                                    Width="5"
                                    Cursor="SizeWE"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />

                                <ContentPresenter
                                    x:Name="Presenter"
                                    Grid.Row="2"
                                    Grid.RowSpan="2"
                                    Grid.Column="1" />

                                <Rectangle
                                    x:Name="RightRectangle"
                                    Grid.Row="1"
                                    Grid.RowSpan="2"
                                    Grid.Column="2"
                                    Width="5"
                                    Cursor="SizeWE"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="BottomLeftRectangle"
                                    Grid.Row="3"
                                    Grid.Column="0"
                                    Width="5"
                                    Height="5"
                                    Cursor="SizeNESW"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="BottomRectangle"
                                    Grid.Row="3"
                                    Grid.Column="1"
                                    Height="5"
                                    Cursor="SizeNS"
                                    Fill="Transparent"
                                    Stroke="{x:Null}" />
                                <Rectangle
                                    x:Name="BottomRightRectangle"
                                    Grid.Row="3"
                                    Grid.Column="2"
                                    Width="5"
                                    Height="5"
                                    Cursor="SizeNWSE"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{x:Null}" />
                            </Grid>
                        </AdornerDecorator>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRecording" Value="True">
                            <Setter TargetName="MinimizeButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="CloseButton" Property="IsEnabled" Value="False" />

                            <Setter TargetName="TopLeftRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="TopRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="TopRightRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="LeftRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="RightRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="BottomLeftRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="BottomRectangle" Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="BottomRightRectangle" Property="IsHitTestVisible" Value="False" />
                        </Trigger>

                        <Trigger Property="IsThin" Value="True">
                            <Setter TargetName="FirstRow" Property="Height" Value="2" />
                            <Setter TargetName="SecondRow" Property="Height" Value="0" />
                            <Setter TargetName="TopGrid" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="TopRectangle" Property="Fill" Value="{Binding ElementName=LeftRectangle, Path=Fill}" />
                            <Setter TargetName="TopRectangle" Property="Height" Value="2" />
                            <Setter TargetName="BottomRectangle" Property="Height" Value="2" />
                            <Setter TargetName="LeftRectangle" Property="Width" Value="2" />
                            <Setter TargetName="RightRectangle" Property="Width" Value="2" />
                            <Setter TargetName="BottomLeftRectangle" Property="Width" Value="2" />
                            <Setter TargetName="BottomRightRectangle" Property="Width" Value="2" />
                            <Setter TargetName="TopLeftRectangle" Property="Width" Value="2" />
                            <Setter TargetName="TopRightRectangle" Property="Width" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExtendedTexBox Style  -->
    <Style TargetType="{x:Type n:ExtendedTextBox}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExtendedTextBox}">
                    <Border
                        x:Name="border"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid x:Name="InnerGrid">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <TextBlock
                                x:Name="WatermarkTextBlock"
                                Padding="3,2"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Foreground="{DynamicResource Element.Foreground.Watermark}"
                                IsHitTestVisible="False"
                                Text="{TemplateBinding Watermark}"
                                Visibility="Collapsed" />

                            <Path
                                x:Name="InnerPath"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Bottom"
                                Data="M 0,0 6,6 0,6 z"
                                Fill="{DynamicResource Element.Border.Required}"
                                Opacity="0"
                                ToolTip="{DynamicResource S.Required}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsObligatory" Value="True" />
                                <Condition Property="Text" Value="{x:Static s:String.Empty}" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Required}" />
                            <Setter TargetName="InnerPath" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.ReadOnly}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Hover}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="{x:Static s:String.Empty}" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="WatermarkTextBlock" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="{x:Null}" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="WatermarkTextBlock" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Pressed}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  IntegerBox Style  -->
    <Style TargetType="{x:Type n:IntegerBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="23" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="MaxLength" Value="9" />
        <Setter Property="Padding" Value="2,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:IntegerBox}">
                    <Border
                        x:Name="border"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Border x:Name="InnerBorder">
                            <Grid x:Name="InnerGrid">
                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Hidden" />

                                <TextBlock
                                    x:Name="WatermarkTextBlock"
                                    Padding="3,2"
                                    Foreground="{DynamicResource Element.Foreground.Watermark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding Watermark}"
                                    Visibility="Collapsed" />

                                <Path
                                    x:Name="InnerPath"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Bottom"
                                    Data="M 0,0 6,6 0,6 z"
                                    Fill="{DynamicResource Element.Border.Required}"
                                    Opacity="0"
                                    ToolTip="{DynamicResource S.Required}" />
                            </Grid>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsObligatory" Value="True" />
                                <Condition Property="Text" Value="{x:Static s:String.Empty}" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Required}" />
                            <Setter TargetName="InnerPath" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsObligatory" Value="True" />
                                <Condition Property="Value" Value="0" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Required}" />
                            <Setter TargetName="InnerPath" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.ReadOnly}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Hover}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="{x:Static s:String.Empty}" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="WatermarkTextBlock" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="{x:Null}" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="WatermarkTextBlock" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Pressed}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  IntegerUpDown Style  -->
    <Style TargetType="{x:Type n:IntegerUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:IntegerUpDown}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="1" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*" />
                                <ColumnDefinition Width="1" />
                                <ColumnDefinition
                                    Width="45*"
                                    MinWidth="20"
                                    MaxWidth="25" />
                            </Grid.ColumnDefinitions>

                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <Separator
                                x:Name="VeticalSeparator"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="1"
                                Width="1"
                                Margin="0"
                                VerticalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="UpButton"
                                Grid.Row="0"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▲"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />

                            <Separator
                                x:Name="HorizontalSeparator"
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="1"
                                Margin="0"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="DownButton"
                                Grid.Row="2"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▼"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="VeticalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="UpButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="DownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="DownButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  NullableIntegerBox Style  -->
    <Style
        BasedOn="{StaticResource {x:Type n:ExtendedTextBox}}"
        TargetType="{x:Type n:NullableIntegerBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!--  NullableIntegerUpDown Style  -->
    <Style TargetType="{x:Type n:NullableIntegerUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:NullableIntegerUpDown}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="1" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*" />
                                <ColumnDefinition Width="1" />
                                <ColumnDefinition
                                    Width="45*"
                                    MinWidth="20"
                                    MaxWidth="25" />
                            </Grid.ColumnDefinitions>

                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <Separator
                                x:Name="VeticalSeparator"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="1"
                                Width="1"
                                Margin="0"
                                VerticalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="UpButton"
                                Grid.Row="0"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▲"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />

                            <Separator
                                x:Name="HorizontalSeparator"
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="1"
                                Margin="0"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="DownButton"
                                Grid.Row="2"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▼"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="VeticalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="UpButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="DownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="DownButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  DoubleBox Style  -->
    <Style
        BasedOn="{StaticResource {x:Type n:ExtendedTextBox}}"
        TargetType="{x:Type n:DoubleBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!--  DoubleUpDown Style  -->
    <Style TargetType="{x:Type n:DoubleUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:DoubleUpDown}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="1" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*" />
                                <ColumnDefinition Width="1" />
                                <ColumnDefinition
                                    Width="45*"
                                    MinWidth="20"
                                    MaxWidth="25" />
                            </Grid.ColumnDefinitions>

                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <Separator
                                x:Name="VeticalSeparator"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="1"
                                Width="1"
                                Margin="0"
                                VerticalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="UpButton"
                                Grid.Row="0"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▲"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />

                            <Separator
                                x:Name="HorizontalSeparator"
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="1"
                                Margin="0"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="DownButton"
                                Grid.Row="2"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▼"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="VeticalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="UpButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="DownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="DownButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  DecimalBox Style  -->
    <Style
        BasedOn="{StaticResource {x:Type n:ExtendedTextBox}}"
        TargetType="{x:Type n:DecimalBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!--  DecimalUpDown Style  -->
    <Style TargetType="{x:Type n:DecimalUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:DecimalUpDown}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="1" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*" />
                                <ColumnDefinition Width="1" />
                                <ColumnDefinition
                                    Width="45*"
                                    MinWidth="20"
                                    MaxWidth="25" />
                            </Grid.ColumnDefinitions>

                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <Separator
                                x:Name="VeticalSeparator"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="1"
                                Width="1"
                                Margin="0"
                                VerticalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="UpButton"
                                Grid.Row="0"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▲"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />

                            <Separator
                                x:Name="HorizontalSeparator"
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="1"
                                Margin="0"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{DynamicResource Element.Border.Medium}"
                                Visibility="Collapsed" />

                            <RepeatButton
                                x:Name="DownButton"
                                Grid.Row="2"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0,-1,0,0"
                                VerticalContentAlignment="Center"
                                BorderThickness="0"
                                Content="▼"
                                Focusable="False"
                                FontSize="8"
                                IsTabStop="False"
                                Style="{StaticResource Style.RepeatButton}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="VeticalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="UpButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="DownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="DownButton" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="HorizontalSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  HexaDecimalBox Style  -->
    <Style TargetType="{x:Type n:HexadecimalBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="23" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="MaxLength" Value="9" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:HexadecimalBox}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource Element.Background.ReadOnly}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  KeyBox Style  -->
    <Style TargetType="{x:Type n:KeyBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="23" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ToolTip" Value="{DynamicResource S.Options.Shortcuts.Info}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:KeyBox}">
                    <Border
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="True"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <TextBlock
                                x:Name="AltTextBlock"
                                Grid.Column="1"
                                Margin="2,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False"
                                Text="Alt +"
                                Visibility="Collapsed" />
                            <TextBlock
                                x:Name="CtrlTextBlock"
                                Grid.Column="2"
                                Margin="2,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False"
                                Text="Ctrl +"
                                Visibility="Collapsed" />
                            <TextBlock
                                x:Name="ShiftTextBlock"
                                Grid.Column="3"
                                Margin="2,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False"
                                Text="Shift +"
                                Visibility="Collapsed" />
                            <TextBlock
                                x:Name="WindowsTextBlock"
                                Grid.Column="4"
                                Margin="2,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False"
                                Text="Windows +"
                                Visibility="Collapsed" />

                            <TextBlock
                                x:Name="CompleteKeyTextBlock"
                                Grid.Column="0"
                                Grid.ColumnSpan="8"
                                Margin="2,0"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                IsHitTestVisible="False"
                                Text="{TemplateBinding Text}"
                                TextAlignment="Center"
                                Visibility="Collapsed" />

                            <n:ExtendedButton
                                x:Name="RemoveButton"
                                Grid.Column="8"
                                Width="16"
                                Height="23"
                                Margin="1,0,0,0"
                                BorderThickness="1,0,0,0"
                                ContentHeight="12"
                                ContentWidth="9"
                                Icon="{DynamicResource Vector.Close}"
                                Style="{DynamicResource Style.Button.NoText.Border}"
                                ToolTip="{DynamicResource S.KeyStrokes.Edit.Remove}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsControlDown" Value="True">
                            <Setter TargetName="CtrlTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsShiftDown" Value="True">
                            <Setter TargetName="ShiftTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsAltDown" Value="True">
                            <Setter TargetName="AltTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsWindowsDown" Value="True">
                            <Setter TargetName="WindowsTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelectionFinished" Value="True">
                            <Setter TargetName="CompleteKeyTextBlock" Property="Visibility" Value="Visible" />
                            <Setter TargetName="AltTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="CtrlTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ShiftTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="WindowsTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="CanRemove" Value="False">
                            <Setter TargetName="RemoveButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                <Setter Property="Background" Value="{DynamicResource Element.Background.Focused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  HeaderedTooltip Style  -->
    <Style
        BasedOn="{StaticResource {x:Type ToolTip}}"
        TargetType="{x:Type n:HeaderedTooltip}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:HeaderedTooltip}">
                    <Border
                        Margin="5"
                        Background="{DynamicResource Element.Background}"
                        BorderBrush="{DynamicResource Element.Border}"
                        BorderThickness="1"
                        Effect="{DynamicResource Shadow.Border.Large}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Border
                                x:Name="ImageBorder"
                                Grid.Row="0"
                                Grid.Column="0"
                                Width="{TemplateBinding MaxSize}"
                                Height="{TemplateBinding MaxSize}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Icon}"
                                Opacity="{DynamicResource Element.Opacity}" />

                            <Label
                                Grid.Row="0"
                                Grid.Column="1"
                                HorizontalAlignment="Stretch"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Content="{TemplateBinding Header}"
                                FontWeight="SemiBold"
                                Foreground="{DynamicResource Element.Foreground.Medium}" />

                            <TextBlock
                                x:Name="PART_InlinesPresenter"
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="Stretch"
                                Foreground="{DynamicResource Element.Foreground.Medium}"
                                Text="{TemplateBinding Text}"
                                TextAlignment="{TemplateBinding TextAlignment}"
                                TextWrapping="WrapWithOverflow" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExtendedMenuItem Style  -->
    <Style TargetType="{x:Type n:ExtendedMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static HorizontalAlignment.Left}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static VerticalAlignment.Center}}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Height" Value="24" />

        <!--  SubmenuItem  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExtendedMenuItem}">
                    <Border
                        x:Name="Bd"
                        Uid="Border_38"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid
                            x:Name="Grid"
                            Uid="Grid_49">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    Width="Auto"
                                    MinWidth="24"
                                    SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition
                                    Width="Auto"
                                    MinWidth="5"
                                    SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <Grid
                                x:Name="CheckSquare"
                                Grid.Column="0"
                                Margin="3,0"
                                VerticalAlignment="Center"
                                Background="Transparent">
                                <Viewbox
                                    x:Name="CheckViewBox"
                                    Width="{TemplateBinding ContentWidth}"
                                    Height="{TemplateBinding ContentHeight}"
                                    Stretch="Uniform"
                                    Visibility="Collapsed">
                                    <Path
                                        x:Name="GlyphPanel"
                                        Uid="Path_12"
                                        Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z"
                                        Fill="{TemplateBinding Foreground}"
                                        FlowDirection="LeftToRight"
                                        Visibility="Hidden" />
                                </Viewbox>

                                <Border
                                    x:Name="ImageBorder"
                                    Width="{TemplateBinding ContentWidth}"
                                    Height="{TemplateBinding ContentHeight}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Icon}"
                                    Opacity="{DynamicResource Element.Opacity}" />
                            </Grid>

                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Uid="ContentPresenter_33"
                                Grid.Column="1"
                                Margin="3,0"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentSource="Header"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <TextBlock
                                x:Name="InputGestureText"
                                Uid="TextBlock_10"
                                Grid.Column="2"
                                Margin="3,0"
                                VerticalAlignment="Center"
                                FontSize="12"
                                FontWeight="Bold"
                                Foreground="{DynamicResource Element.Foreground.Gray112}"
                                Text="{TemplateBinding InputGestureText}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckSquare" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                        </Trigger>
                        <Trigger Property="HasIcon" Value="True">
                            <Setter TargetName="ImageBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasIcon" Value="False">
                            <Setter TargetName="CheckViewBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="6,2" />
                <Setter Property="MinHeight" Value="26" />
                <Setter Property="MinWidth" Value="50" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type n:ExtendedMenuItem}">
                            <Border
                                x:Name="Bd"
                                Uid="Border_39"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <Grid
                                    x:Name="Grid"
                                    Uid="Grid_49"
                                    IsSharedSizeScope="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <Grid
                                        x:Name="CheckSquare"
                                        Grid.Column="0"
                                        Background="Transparent"
                                        Visibility="Collapsed">
                                        <Viewbox
                                            x:Name="CheckViewBox"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            Margin="2,0,0,0"
                                            Stretch="Uniform"
                                            Visibility="Collapsed">
                                            <Path
                                                x:Name="GlyphPanel"
                                                Uid="Path_12"
                                                Margin="4,0,6,0"
                                                VerticalAlignment="Center"
                                                Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z"
                                                Fill="{TemplateBinding Foreground}"
                                                FlowDirection="LeftToRight"
                                                Visibility="Hidden" />
                                        </Viewbox>

                                        <Border
                                            x:Name="ImageBorder"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            Margin="2,0,0,0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Background="{TemplateBinding Icon}"
                                            Opacity="{DynamicResource Element.Opacity}"
                                            Visibility="Collapsed" />
                                    </Grid>

                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Uid="ContentPresenter_35"
                                        Grid.Column="1"
                                        Margin="3,0,6,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Header}"
                                        ContentSource="Header"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                    <!--  Popup with the SubMenus  -->
                                    <Popup
                                        Name="SubMenuPopup"
                                        Grid.Column="0"
                                        Grid.ColumnSpan="2"
                                        AllowsTransparency="True"
                                        Focusable="False"
                                        HorizontalOffset="-2"
                                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                                        Placement="Bottom"
                                        PopupAnimation="Fade">
                                        <Border
                                            Name="SubmenuBorder"
                                            Margin="1"
                                            Background="{DynamicResource Element.Background}"
                                            BorderBrush="{DynamicResource Element.Border}"
                                            BorderThickness="1"
                                            Effect="{DynamicResource Shadow.Border.Small}"
                                            SnapsToDevicePixels="True">
                                            <StackPanel
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="True">
                                    <Setter TargetName="ImageBorder" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="False">
                                    <Setter TargetName="CheckViewBox" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type n:ExtendedMenuItem}">
                            <Border
                                x:Name="Bd"
                                Uid="Border_39"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <Grid
                                    x:Name="Grid"
                                    Uid="Grid_49"
                                    IsSharedSizeScope="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition
                                            Width="Auto"
                                            MinWidth="24"
                                            SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition
                                            Width="Auto"
                                            MinWidth="5"
                                            SharedSizeGroup="MenuItemIGTColumnGroup" />
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Grid
                                        x:Name="CheckSquare"
                                        Grid.Column="0"
                                        Margin="3,0"
                                        Background="Transparent"
                                        Visibility="Collapsed">
                                        <Viewbox
                                            x:Name="CheckViewBox"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            Stretch="Uniform"
                                            Visibility="Collapsed">
                                            <Path
                                                x:Name="GlyphPanel"
                                                Uid="Path_12"
                                                VerticalAlignment="Center"
                                                Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z"
                                                Fill="{TemplateBinding Foreground}"
                                                FlowDirection="LeftToRight"
                                                Visibility="Hidden" />
                                        </Viewbox>

                                        <Border
                                            x:Name="ImageBorder"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Background="{TemplateBinding Icon}"
                                            Opacity="{DynamicResource Element.Opacity}"
                                            Visibility="Collapsed" />
                                    </Grid>

                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Uid="ContentPresenter_35"
                                        Grid.Column="1"
                                        Margin="3,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Header}"
                                        ContentSource="Header"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="True">
                                    <Setter TargetName="ImageBorder" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="False">
                                    <Setter TargetName="CheckViewBox" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type n:ExtendedMenuItem}">
                            <Border
                                x:Name="Bd"
                                Uid="Border_42"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                                <Grid
                                    x:Name="Grid"
                                    Uid="Grid_50">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition
                                            Width="Auto"
                                            MinWidth="24"
                                            SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition
                                            Width="Auto"
                                            MinWidth="5"
                                            SharedSizeGroup="MenuItemIGTColumnGroup" />
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Grid
                                        x:Name="CheckSquare"
                                        Grid.Column="0"
                                        Margin="3,0"
                                        Background="Transparent"
                                        Visibility="Collapsed">
                                        <Viewbox
                                            x:Name="CheckViewBox"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            Stretch="Uniform"
                                            Visibility="Collapsed">
                                            <Path
                                                x:Name="GlyphPanel"
                                                Uid="Path_12"
                                                VerticalAlignment="Center"
                                                Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z"
                                                Fill="{TemplateBinding Foreground}"
                                                FlowDirection="LeftToRight"
                                                Visibility="Hidden" />
                                        </Viewbox>

                                        <Border
                                            x:Name="ImageBorder"
                                            Width="{TemplateBinding ContentWidth}"
                                            Height="{TemplateBinding ContentHeight}"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Background="{TemplateBinding Icon}"
                                            Opacity="{DynamicResource Element.Opacity}"
                                            Visibility="Collapsed" />
                                    </Grid>

                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Uid="ContentPresenter_39"
                                        Grid.Column="1"
                                        Margin="3,0"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Header}"
                                        ContentSource="Header"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                    <TextBlock
                                        x:Name="InputGestureText"
                                        Uid="TextBlock_10"
                                        Grid.Column="2"
                                        Margin="3,0"
                                        VerticalAlignment="Center"
                                        FontSize="12"
                                        FontWeight="Bold"
                                        Foreground="{DynamicResource Element.Foreground.Gray112}"
                                        Text="{TemplateBinding InputGestureText}"
                                        TextAlignment="Left" />

                                    <Path
                                        x:Name="Path"
                                        Uid="Path_16"
                                        Grid.Column="3"
                                        Margin="4,0,6,0"
                                        VerticalAlignment="Center"
                                        Data="M0,0L4,3.5 0,7z"
                                        Fill="{TemplateBinding Foreground}" />

                                    <Popup
                                        Name="Popup"
                                        Grid.Column="3"
                                        AllowsTransparency="True"
                                        Focusable="False"
                                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                                        Placement="Right"
                                        PopupAnimation="Fade"
                                        VerticalOffset="-2">
                                        <Border
                                            Name="SubmenuBorder"
                                            Margin="1"
                                            Background="{DynamicResource Element.Background}"
                                            BorderBrush="{DynamicResource Element.Border}"
                                            BorderThickness="1"
                                            Effect="{DynamicResource Shadow.Border.Small}"
                                            SnapsToDevicePixels="True">
                                            <StackPanel
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="True">
                                    <Setter TargetName="ImageBorder" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="HasIcon" Value="False">
                                    <Setter TargetName="CheckViewBox" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="CheckSquare" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
                <Setter Property="Background" Value="{DynamicResource Brush.MenuItem.Background.Hover}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.MenuItem.Border.Hover}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.MenuItem.Background.Pressed}" />
            </Trigger>

            <!--  When !DarkMode, !IsMouseOver, !IsKeyboardFocused  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader" />
                    <Condition Property="IsOverNonClientArea" Value="True" />
                    <Condition Property="DarkMode" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsKeyboardFocused" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="Foreground" Value="#FF000000" />
            </MultiTrigger>

            <!--  When DarkMode, !IsMouseOver, !IsKeyboardFocused  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader" />
                    <Condition Property="IsOverNonClientArea" Value="True" />
                    <Condition Property="DarkMode" Value="True" />
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsKeyboardFocused" Value="False" />
                </MultiTrigger.Conditions>

                <Setter Property="Foreground" Value="WhiteSmoke" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  HideableTabControl Style  -->
    <Style TargetType="{x:Type n:HideableTabControl}">
        <Setter Property="Background" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:HideableTabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <n:ExtendedToggleButton
                            x:Name="NotificationsButton"
                            Grid.Row="0"
                            Grid.Column="1"
                            MinHeight="26"
                            Padding="2,2,4,2"
                            VerticalAlignment="Center"
                            BorderThickness="0"
                            ContentHeight="16"
                            ContentWidth="16"
                            IsHitTestVisible="{Binding ElementName=MainPopup, Path=IsOpen, Mode=OneWay, Converter={StaticResource InvertedBool}}"
                            IsOverNonClientArea="True"
                            Style="{DynamicResource Style.ToggleButton.NoBorder}"
                            Text="{DynamicResource S.Notifications}"
                            TextWrapping="NoWrap">
                            <n:ExtendedToggleButton.Resources>
                                <Storyboard x:Key="NotificationStoryboard">
                                    <DoubleAnimation
                                        AutoReverse="True"
                                        RepeatBehavior="10x"
                                        Storyboard.TargetName="NotificationsButton"
                                        Storyboard.TargetProperty="Opacity"
                                        From="1"
                                        To="0.4"
                                        Duration="0:0:0.6" />
                                </Storyboard>
                            </n:ExtendedToggleButton.Resources>
                        </n:ExtendedToggleButton>

                        <Popup
                            x:Name="MainPopup"
                            Grid.Row="0"
                            Grid.Column="1"
                            Width="400"
                            Height="Auto"
                            MinHeight="100"
                            MaxHeight="400"
                            Margin="0"
                            AllowsTransparency="True"
                            IsOpen="{Binding ElementName=NotificationsButton, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Placement="Bottom"
                            PlacementTarget="{Binding ElementName=NotificationsButton}"
                            PopupAnimation="Fade"
                            SnapsToDevicePixels="True"
                            StaysOpen="False">
                            <Popup.HorizontalOffset>
                                <MultiBinding Converter="{StaticResource CenterPopupConverter}">
                                    <Binding
                                        ElementName="MainPopup"
                                        Path="PlacementTarget.ActualWidth" />
                                    <Binding
                                        ElementName="NotificationBox"
                                        Path="ActualWidth" />
                                </MultiBinding>
                            </Popup.HorizontalOffset>

                            <n:NotificationBox x:Name="NotificationBox" />
                        </Popup>

                        <Menu
                            Grid.Row="0"
                            Grid.Column="2"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            Effect="{x:Null}">
                            <n:ExtendedMenuItem
                                x:Name="ExtrasMenuItem"
                                BorderThickness="0"
                                ContentHeight="16"
                                ContentWidth="16"
                                Header="{DynamicResource S.Editor.Extras}"
                                Icon="{DynamicResource Vector.Editor}">
                                <n:ExtendedMenuItem
                                    x:Name="OptionsMenuItem"
                                    Command="{TemplateBinding OptionsCommand}"
                                    ContentHeight="16"
                                    ContentWidth="16"
                                    Header="{DynamicResource S.StartUp.Options}"
                                    Icon="{DynamicResource Vector.Options}" />
                                <n:ExtendedMenuItem
                                    x:Name="FeedbackMenuItem"
                                    Command="{TemplateBinding FeedbackCommand}"
                                    ContentHeight="16"
                                    ContentWidth="16"
                                    Header="{DynamicResource S.Feedback.Feedback}"
                                    Icon="{DynamicResource Vector.Application}" />
                                <n:ExtendedMenuItem
                                    x:Name="TroubleshootMenuItem"
                                    Command="{TemplateBinding TroubleshootCommand}"
                                    ContentHeight="16"
                                    ContentWidth="16"
                                    Header="{DynamicResource S.Troubleshoot.Title}"
                                    Icon="{DynamicResource Vector.Warning}" />

                                <Separator Height="1" />

                                <n:ExtendedMenuItem
                                    x:Name="HelpMenuItem"
                                    Command="{TemplateBinding HelpCommand}"
                                    ContentHeight="16"
                                    ContentWidth="16"
                                    Header="{DynamicResource S.Editor.Help}"
                                    Icon="{DynamicResource Vector.Question}" />
                            </n:ExtendedMenuItem>
                        </Menu>

                        <Border
                            x:Name="ContentBorder"
                            Grid.Row="1"
                            Grid.Column="0"
                            Grid.ColumnSpan="3"
                            Background="{DynamicResource Panel.Background.Level2}"
                            BorderBrush="{DynamicResource Element.Border.Light}"
                            BorderThickness="0,1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter
                                    Grid.Column="0"
                                    Grid.ColumnSpan="2"
                                    ContentSource="SelectedContent" />

                                <n:ExtendedButton
                                    x:Name="HideGridButton"
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    MinWidth="28"
                                    Margin="0,0,1,1"
                                    Padding="2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom"
                                    HorizontalContentAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    ContentHeight="16"
                                    ContentWidth="16"
                                    Icon="{DynamicResource Glyph.Up}"
                                    Style="{DynamicResource Style.Button.NoText}" />
                            </Grid>
                        </Border>

                        <TabPanel
                            Name="TabPanel"
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="5,5,0,-2"
                            Background="Transparent"
                            IsItemsHost="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  AwareTabItem Style  -->
    <Style TargetType="{x:Type n:AwareTabItem}">
        <Setter Property="FontFamily" Value="Segoe UI Semilight" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:AwareTabItem}">
                    <Grid
                        Name="Panel"
                        Background="Transparent">
                        <Border
                            Name="ContentBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource Element.Border.Light}"
                            BorderThickness="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <Border
                                    x:Name="ImageBorder"
                                    Grid.Column="0"
                                    Width="14"
                                    Height="14"
                                    Margin="10,2,2,2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Icon}"
                                    Opacity=".6" />

                                <ContentPresenter
                                    x:Name="ContentSite"
                                    Grid.Column="1"
                                    Margin="2,2,10,2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    Effect="{x:Null}" />
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ImageBorder" Property="Visibility" Value="Collapsed">
                            <Setter TargetName="ContentSite" Property="Margin" Value="10,2" />
                        </Trigger>

                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="ImageBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentSite" Property="Margin" Value="10,2" />
                        </Trigger>

                        <DataTrigger
                            Binding="{Binding Path=IsMouseOver, ElementName=Panel}"
                            Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ImageBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ImageBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>

                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Header}" />
                            <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                        </DataTrigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Header}" />
                            <Setter Property="Background" Value="{DynamicResource Panel.Background.Level2}" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="ImageBorder" Property="Opacity" Value="1" />
                        </Trigger>

                        <!--  When ExtendChrome, !IsDark, !IsSelected  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FF000000" />
                            <Setter TargetName="ContentBorder" Property="Background" Value="#90FFFFFF" />
                        </MultiDataTrigger>

                        <!--  When ExtendChrome, !IsDark, IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Header}" />
                        </MultiDataTrigger>

                        <!--  When ExtendChrome, !IsDark, IsSelected  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource Panel.Background.Level2}" />
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Header}" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>

                        <!--  When ExtendChrome, IsDark, !IsSelected  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FFF8F8FF" />

                            <Setter TargetName="ContentBorder" Property="Background">
                                <Setter.Value>
                                    <RadialGradientBrush>
                                        <GradientStop Offset="0" Color="{Binding Source={x:Static SystemParameters.WindowGlassColor}, Converter={StaticResource ColorToAlphaConverter}, ConverterParameter=6E}" />
                                        <GradientStop Offset="0.4" Color="{Binding Source={x:Static SystemParameters.WindowGlassColor}, Converter={StaticResource ColorToAlphaConverter}, ConverterParameter=50}" />
                                        <GradientStop Offset="1" />
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!--  When ExtendChrome, IsDark, IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FFBFEFFF" />
                        </MultiDataTrigger>

                        <!--  When ExtendChrome, IsDark, IsSelected  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static t:UserSettings.All}, Path=EditorExtendChrome, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource Panel.Background.Level2}" />
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Header}" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>

                        <!--  When !ShowBackground, !IsSelected  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ShowBackground}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ContentBorder" Property="Background" Value="Transparent" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  StatusBand Style  -->
    <Style TargetType="{x:Type n:StatusBand}">
        <Setter Property="Visibility" Value="Collapsed" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:StatusBand}">
                    <Grid
                        x:Name="WarningGrid"
                        Height="Auto"
                        MinHeight="30">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>

                        <Grid.Resources>
                            <Storyboard x:Key="HideWarningStoryboard">
                                <DoubleAnimation
                                    Storyboard.TargetProperty="(Grid.Opacity)"
                                    From="{Binding ElementName=WarningGrid, Path=Opacity}"
                                    To="0"
                                    Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <PowerEase Power="8" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>

                                <ObjectAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(Grid.Visibility)"
                                    Duration="0:0:0.5">
                                    <DiscreteObjectKeyFrame
                                        KeyTime="0:0:0.2"
                                        Value="{x:Static Visibility.Collapsed}" />
                                </ObjectAnimationUsingKeyFrames>

                                <BooleanAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(Grid.IsHitTestVisible)"
                                    Duration="0:0:0.0">
                                    <DiscreteBooleanKeyFrame
                                        KeyTime="0:0:0.0"
                                        Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                            </Storyboard>

                            <!--  Storyboard.TargetName="WarningGrid"  -->
                            <Storyboard x:Key="ShowWarningStoryboard">
                                <ObjectAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(Grid.Visibility)"
                                    Duration="0:0:0">
                                    <DiscreteObjectKeyFrame
                                        KeyTime="0:0:0"
                                        Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>

                                <DoubleAnimation
                                    Storyboard.TargetProperty="(Grid.Opacity)"
                                    From="0"
                                    To="1"
                                    Duration="0:0:0.5">
                                    <DoubleAnimation.EasingFunction>
                                        <PowerEase Power="8" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>

                                <BooleanAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(Grid.IsHitTestVisible)"
                                    Duration="0:0:0.0">
                                    <DiscreteBooleanKeyFrame
                                        KeyTime="0:0:0.0"
                                        Value="True" />
                                </BooleanAnimationUsingKeyFrames>
                            </Storyboard>
                        </Grid.Resources>

                        <Border
                            x:Name="WarningBorder"
                            Grid.Column="0"
                            Margin="3"
                            Background="{DynamicResource Vector.Info}"
                            Opacity="{DynamicResource Element.Opacity}" />

                        <TextBlock
                            x:Name="WarningTextBlock"
                            Grid.Column="1"
                            Margin="5,0,5,0"
                            VerticalAlignment="Center"
                            FontSize="12"
                            Foreground="{DynamicResource Element.Foreground}"
                            Text="{TemplateBinding Text}"
                            TextWrapping="WrapWithOverflow" />

                        <TextBlock
                            x:Name="LinkTextBlock"
                            Grid.Column="1"
                            Margin="5,0,5,0"
                            VerticalAlignment="Center"
                            FontSize="12"
                            TextWrapping="WrapWithOverflow"
                            Visibility="Collapsed">
                            <Hyperlink x:Name="MainHyperlink">
                                <Run Text="{TemplateBinding Text}" />
                            </Hyperlink>
                        </TextBlock>

                        <n:ExtendedButton
                            x:Name="SuppressButton"
                            Grid.Column="2"
                            MinWidth="30"
                            HorizontalAlignment="Center"
                            HorizontalContentAlignment="Center"
                            ContentHeight="16"
                            ContentWidth="16"
                            Icon="{DynamicResource Vector.Close}"
                            Style="{DynamicResource Style.Button.NoText}"
                            ToolTip="{DynamicResource S.Suppress}"
                            ToolTipService.HorizontalOffset="-5"
                            ToolTipService.Placement="Top">
                            <!--<n:ExtendedButton.Triggers>
                                <EventTrigger RoutedEvent="Button.Click">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard Storyboard="{StaticResource HideWarningStoryboard}" Storyboard.TargetName="WarningGrid" HandoffBehavior="SnapshotAndReplace"/>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </n:ExtendedButton.Triggers>-->
                        </n:ExtendedButton>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Type" Value="Update">
                            <Setter TargetName="WarningGrid" Property="Background" Value="{DynamicResource Brush.StatusBand.Info}" />
                            <Setter TargetName="WarningBorder" Property="Background" Value="{DynamicResource Vector.Synchronize}" />
                        </Trigger>
                        <Trigger Property="Type" Value="Info">
                            <Setter TargetName="WarningGrid" Property="Background" Value="{DynamicResource Brush.StatusBand.Info}" />
                            <Setter TargetName="WarningBorder" Property="Background" Value="{DynamicResource Vector.Info}" />
                        </Trigger>
                        <Trigger Property="Type" Value="Warning">
                            <Setter TargetName="WarningGrid" Property="Background" Value="{DynamicResource Brush.StatusBand.Warning}" />
                            <Setter TargetName="WarningBorder" Property="Background" Value="{DynamicResource Vector.Warning}" />
                        </Trigger>
                        <Trigger Property="Type" Value="Error">
                            <Setter TargetName="WarningGrid" Property="Background" Value="{DynamicResource Brush.StatusBand.Error}" />
                            <Setter TargetName="WarningBorder" Property="Background" Value="{DynamicResource Vector.Cancel.Round}" />
                        </Trigger>
                        <Trigger Property="IsLink" Value="True">
                            <Setter TargetName="LinkTextBlock" Property="Visibility" Value="Visible" />
                            <Setter TargetName="WarningTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExtendedCheckBox Style  -->
    <Style TargetType="{x:Type n:ExtendedCheckBox}">
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,0,0,0" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual.NoMargin}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExtendedCheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Border
                            x:Name="checkBoxBorder"
                            Margin="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Margin="1"
                                    Data="F1 M 9.97498,.8 L 4.6983,9.09834  L 1,5.19331 L 1.27664,3.52165 L 4.255,6.08833 L 9.33331,1.288e-005 Z"
                                    Fill="{DynamicResource Element.Glyph}"
                                    Opacity="0"
                                    Stretch="None" />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="2"
                                    Fill="{DynamicResource Element.Glyph}"
                                    Opacity="0" />
                            </Grid>
                        </Border>

                        <TextBlock
                            x:Name="MainTextBlock"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            Padding="0,-1,0,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            TextWrapping="{TemplateBinding TextWrapping}">
                            <Run Text="{TemplateBinding Text}" />
                            <Run
                                x:Name="MarginRun"
                                Text=" " />
                            <Run
                                Foreground="{DynamicResource Element.Foreground.Gray150}"
                                Text="{TemplateBinding Info}" />
                        </TextBlock>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle
                                                        Margin="14,0,0,0"
                                                        SnapsToDevicePixels="True"
                                                        Stroke="{DynamicResource Element.Foreground}"
                                                        StrokeDashArray="1 2"
                                                        StrokeThickness="1" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>

                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>

                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="MarginRun" Property="Text" Value="" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource Element.Glyph.Hover}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource Element.Glyph.Hover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource Element.Glyph.Pressed}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource Element.Glyph.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  LabelSeparator Style  -->
    <Style TargetType="{x:Type n:LabelSeparator}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Background" Value="{DynamicResource Element.Border.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:LabelSeparator}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                x:Name="LeftColumn"
                                Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition
                                x:Name="RightColumn"
                                Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Rectangle
                            x:Name="LeftRectangle"
                            Grid.Column="0"
                            Height="1"
                            Margin="0,0,2,0"
                            VerticalAlignment="Center"
                            Fill="{TemplateBinding Background}" />
                        <TextBlock
                            Grid.Column="1"
                            Padding="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Text}" />
                        <Rectangle
                            x:Name="RightRectangle"
                            Grid.Column="2"
                            Height="1"
                            Margin="2,0,0,0"
                            VerticalAlignment="Center"
                            Fill="{TemplateBinding Background}" />
                        <TextBlock
                            x:Name="RightTextBlock"
                            Grid.Column="3"
                            Padding="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding TextRight}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="TextRight" Value="{x:Static s:String.Empty}">
                            <Setter TargetName="RightTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TextRight" Value="{x:Null}">
                            <Setter TargetName="RightTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TextAlignment" Value="Left">
                            <Setter TargetName="LeftColumn" Property="Width" Value="0" />
                            <Setter TargetName="LeftRectangle" Property="Margin" Value="0" />
                            <Setter TargetName="LeftRectangle" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TextAlignment" Value="Right">
                            <Setter TargetName="RightColumn" Property="Width" Value="0" />
                            <Setter TargetName="RightRectangle" Property="Margin" Value="0" />
                            <Setter TargetName="RightRectangle" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ColorBox Style  -->
    <Style TargetType="{x:Type n:ColorBox}">
        <Setter Property="Height" Value="26" />
        <Setter Property="MinWidth" Value="70" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ToolTip" Value="{DynamicResource S.SelectColor}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ColorBox}">
                    <Border
                        x:Name="MainBorder"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MaxWidth="{TemplateBinding MaxWidth}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.Background>
                            <DrawingBrush
                                TileMode="Tile"
                                Viewport="0,0,10,10"
                                ViewportUnits="Absolute">
                                <DrawingBrush.Drawing>
                                    <DrawingGroup>
                                        <GeometryDrawing Brush="White">
                                            <GeometryDrawing.Geometry>
                                                <RectangleGeometry Rect="0,0 100,100" />
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                        <GeometryDrawing Brush="LightGray">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <RectangleGeometry Rect="0,0 50,50" />
                                                    <RectangleGeometry Rect="50,50 50,50" />
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingGroup>
                                </DrawingBrush.Drawing>
                            </DrawingBrush>
                        </Border.Background>

                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedColor, Converter={StaticResource ColorToBrush}}"
                            BorderThickness="0" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  CircularProgressBar Style  -->
    <Style TargetType="{x:Type n:CircularProgressBar}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:CircularProgressBar}">
                    <Path
                        x:Name="PathRoot"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Stroke="{TemplateBinding SegmentColor}"
                        StrokeThickness="{TemplateBinding StrokeThickness}">
                        <Path.Data>
                            <PathGeometry>
                                <PathGeometry.Figures>
                                    <PathFigureCollection>
                                        <PathFigure x:Name="PathFigure">
                                            <PathFigure.Segments>
                                                <PathSegmentCollection>
                                                    <ArcSegment
                                                        x:Name="ArcSegment"
                                                        SweepDirection="Clockwise" />
                                                </PathSegmentCollection>
                                            </PathFigure.Segments>
                                        </PathFigure>
                                    </PathFigureCollection>
                                </PathGeometry.Figures>
                            </PathGeometry>
                        </Path.Data>
                    </Path>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".7" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--  ZoomControl Style  -->
    <Style TargetType="{x:Type n:ZoomBox}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ZoomBox}">
                    <ScrollViewer
                        x:Name="ScrollViewer"
                        Background="Transparent"
                        ClipToBounds="True"
                        HorizontalScrollBarVisibility="Auto"
                        VerticalScrollBarVisibility="Auto">
                        <Grid
                            x:Name="Grid"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            RenderTransformOrigin="0.5,0.5">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ScaleTransform" />
                                </TransformGroup>
                            </Grid.LayoutTransform>

                            <Viewbox
                                Grid.Row="0"
                                Grid.Column="0">
                                <Image
                                    x:Name="ImageControl"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                                    Source="{TemplateBinding ImageSource,
                                                             Converter={StaticResource UriToBitmapConverter}}" />
                            </Viewbox>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  FrameViewer Style  -->
    <Style TargetType="{x:Type n:FrameViewer}">
        <Setter Property="ClipToBounds" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:FrameViewer}">
                    <ScrollViewer
                        x:Name="ScrollViewer"
                        Background="Transparent"
                        ClipToBounds="True"
                        HorizontalScrollBarVisibility="Auto"
                        VerticalScrollBarVisibility="Auto">
                        <Grid
                            x:Name="Grid"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            RenderTransformOrigin="0.5,0.5">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ScaleTransform" />
                                </TransformGroup>
                            </Grid.LayoutTransform>

                            <Viewbox>
                                <Image
                                    x:Name="ImageControl"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                                    Source="{TemplateBinding Source}" />
                            </Viewbox>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  SpectrumSlider Styles  -->
    <Style
        x:Key="Style.RepeatButton.Slider"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{x:Type n:ColorThumb}"
        TargetType="{x:Type n:ColorThumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Viewbox>
                        <Grid
                            Background="Transparent"
                            Cursor="Hand">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="4*" />
                                <ColumnDefinition
                                    Width="6*"
                                    MinWidth="10" />
                                <ColumnDefinition Width="4*" />
                            </Grid.ColumnDefinitions>

                            <Polygon
                                x:Name="LeftPolygon"
                                Grid.Column="0"
                                Fill="{DynamicResource Element.Background}"
                                Points="0.5,0  5.5,4.5  0.5,9"
                                SnapsToDevicePixels="True"
                                Stroke="{DynamicResource Element.Border}"
                                StrokeThickness="0.5"
                                UseLayoutRounding="True" />
                            <Polygon
                                x:Name="RightPolygon"
                                Grid.Column="2"
                                Fill="{DynamicResource Element.Background}"
                                Points="5.5,0  0.5,4.5  5.5,9"
                                SnapsToDevicePixels="True"
                                Stroke="{DynamicResource Element.Border}"
                                StrokeThickness="0.5"
                                UseLayoutRounding="True" />
                        </Grid>
                    </Viewbox>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="LeftPolygon" Property="Fill" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="RightPolygon" Property="Fill" Value="{DynamicResource Element.Background.Hover}" />
                            <Setter TargetName="LeftPolygon" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="RightPolygon" Property="Stroke" Value="{DynamicResource Element.Border.Hover}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="LeftPolygon" Property="Fill" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="RightPolygon" Property="Fill" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter TargetName="LeftPolygon" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="RightPolygon" Property="Stroke" Value="{DynamicResource Element.Border.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{x:Type n:SpectrumSlider}"
        TargetType="{x:Type n:SpectrumSlider}">
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="Maximum" Value="100" />
        <Setter Property="TickFrequency" Value="0.001" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <Setter Property="IsDirectionReversed" Value="False" />
        <Setter Property="Value" Value="1" />
        <Setter Property="Background">
            <Setter.Value>
                <DrawingBrush
                    TileMode="Tile"
                    Viewport="0,0,10,10"
                    ViewportUnits="Absolute">
                    <DrawingBrush.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="White">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0 100,100" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing Brush="LightGray">
                                <GeometryDrawing.Geometry>
                                    <GeometryGroup>
                                        <RectangleGeometry Rect="0,0 50,50" />
                                        <RectangleGeometry Rect="50,50 50,50" />
                                    </GeometryGroup>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingGroup>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:SpectrumSlider}">
                    <Border
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid
                            MinWidth="{TemplateBinding Slider.MinWidth}"
                            ClipToBounds="False"
                            Effect="{DynamicResource Shadow.Border.Large}">
                            <!--  Spectrum  -->
                            <Border
                                x:Name="TrackBackground"
                                Width="Auto">
                                <Rectangle
                                    x:Name="PART_SpectrumDisplay"
                                    VerticalAlignment="Stretch"
                                    Stretch="Fill" />
                            </Border>

                            <!--  Selection Range  -->
                            <Canvas
                                Width="4"
                                HorizontalAlignment="Center">
                                <Rectangle
                                    x:Name="PART_SelectionRange"
                                    Canvas.Left="1"
                                    Width="2.0"
                                    Fill="{DynamicResource Element.Foreground}"
                                    Visibility="Hidden" />
                            </Canvas>

                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton
                                        x:Name="DecreaseRepeatButton"
                                        Command="Slider.DecreaseLarge"
                                        Style="{StaticResource Style.RepeatButton.Slider}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton
                                        x:Name="IncreaseRepeatButton"
                                        Command="Slider.IncreaseLarge"
                                        Style="{StaticResource Style.RepeatButton.Slider}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <n:ColorThumb
                                        x:Name="Thumb"
                                        Height="Auto"
                                        Margin="-1,-10"
                                        ThumbColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!--  Display SelectionRange background  -->
                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                            <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Width" Value="Auto">
                            <Setter Property="MinWidth" Value="21" />
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="104" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RangeSlider Styles  -->
    <Style
        x:Key="Style.Slider.Special"
        TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid x:Name="Root">
                        <Grid x:Name="HorizontalTemplate">
                            <Track x:Name="PART_Track">
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton
                                        x:Name="HorizontalTrackLargeChangeIncreaseRepeatButton"
                                        IsTabStop="False"
                                        Template="{StaticResource Template.RepeatButton.Simple}" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton
                                        x:Name="HorizontalTrackLargeChangeDecreaseRepeatButton"
                                        IsTabStop="False"
                                        Template="{StaticResource Template.RepeatButton.Simple}" />
                                </Track.DecreaseRepeatButton>

                                <Track.Thumb>
                                    <Thumb
                                        x:Name="HorizontalThumb"
                                        Width="10"
                                        Height="18"
                                        IsTabStop="False"
                                        Template="{StaticResource Template.Slider.Thumb.Horizontal}" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="HorizontalThumb" Property="Template" Value="{StaticResource Template.Slider.Thumb.Bottom}" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="HorizontalThumb" Property="Template" Value="{StaticResource Template.Slider.Thumb.Top}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type n:RangeSlider}">
        <Setter Property="TickPlacement" Value="BottomRight" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:RangeSlider}">
                    <Grid x:Name="LayoutRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition
                                Height="Auto"
                                MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TickBar
                            x:Name="TopTick"
                            Grid.Row="0"
                            Height="4"
                            Margin="5,0,5,2"
                            Fill="{DynamicResource Element.Border}"
                            Placement="Top"
                            TickFrequency="1"
                            Visibility="Collapsed" />
                        <TickBar
                            x:Name="BottomTick"
                            Grid.Row="2"
                            Height="4"
                            Margin="5,1,5,0"
                            Fill="{DynamicResource Element.Border}"
                            Placement="Bottom"
                            TickFrequency="1"
                            Visibility="Collapsed" />

                        <Border
                            x:Name="TrackBorder"
                            Grid.Row="1"
                            Height="3"
                            Margin="4,0"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1" />
                        <Border
                            x:Name="ProgressBorder"
                            Grid.Row="1"
                            Height="3"
                            VerticalAlignment="Center"
                            Background="{DynamicResource Element.Border.Hover}"
                            BorderThickness="0" />

                        <Slider
                            x:Name="LowerSlider"
                            Grid.Row="1"
                            AutoToolTipPlacement="TopLeft"
                            IsTabStop="False"
                            Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Maximum, Mode=TwoWay}"
                            Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Minimum, Mode=TwoWay}"
                            Style="{StaticResource Style.Slider.Special}"
                            TickPlacement="{TemplateBinding TickPlacement}"
                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LowerValue, Mode=TwoWay}" />

                        <Slider
                            x:Name="UpperSlider"
                            Grid.Row="1"
                            AutoToolTipPlacement="TopLeft"
                            IsTabStop="False"
                            Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Maximum, Mode=TwoWay}"
                            Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Minimum, Mode=TwoWay}"
                            Style="{StaticResource Style.Slider.Special}"
                            TickPlacement="{TemplateBinding TickPlacement}"
                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UpperValue, Mode=TwoWay}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ProgressBorder" Property="Margin" Value="0,3,0,0" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ProgressBorder" Property="Margin" Value="0,0,0,3" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ProgressBorder" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Card Style  -->
    <Style TargetType="{x:Type n:Card}">
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="Width" Value="190" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Background" Value="#20FFFFFF" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Icon" Value="{DynamicResource Vector.Add}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:Card}">
                    <Border
                        x:Name="MainBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="MainGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="32" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <TextBlock
                                x:Name="HeaderTextBlock"
                                Grid.Row="0"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Margin="2,0"
                                Padding="1"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="12"
                                Foreground="{TemplateBinding Foreground}"
                                Text="{TemplateBinding Header}" />

                            <Border
                                Grid.Row="1"
                                Grid.Column="0"
                                Width="20"
                                Height="20"
                                Margin="5"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Icon}"
                                Opacity="{DynamicResource Element.Opacity}" />

                            <TextBlock
                                x:Name="DescriptionTexBlock"
                                Grid.Row="1"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                Padding="5,0,0,0"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                Foreground="{TemplateBinding Foreground}"
                                Text="{TemplateBinding Description}"
                                TextWrapping="WrapWithOverflow" />

                            <ProgressBar
                                x:Name="MainProgressBar"
                                Grid.Row="2"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Height="5"
                                VerticalAlignment="Bottom"
                                BorderThickness="0"
                                IsIndeterminate="True"
                                Maximum="100"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>

                        <Trigger Property="Status" Value="Processing">
                            <Setter Property="IsHitTestVisible" Value="False" />
                        </Trigger>

                        <Trigger Property="Status" Value="Available">
                            <Setter Property="Icon" Value="{DynamicResource Vector.Add}" />
                        </Trigger>

                        <Trigger Property="Status" Value="Processing">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="MainProgressBar" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainProgressBar" Property="IsIndeterminate" Value="True" />
                        </Trigger>

                        <Trigger Property="Status" Value="Ready">
                            <Setter Property="Icon" Value="{DynamicResource Vector.Ok.Round}" />
                            <Setter Property="ToolTip" Value="{DynamicResource Extras.Ready.Info}" />
                        </Trigger>

                        <Trigger Property="Status" Value="Error">
                            <Setter TargetName="MainGrid" Property="Background" Value="#10F24D4D" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExtendedListBoxItem Style (Language List)  -->
    <Style TargetType="{x:Type n:ExtendedListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual.NoMargin}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExtendedListBoxItem}">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid ToolTip="{TemplateBinding Tag}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border
                                Grid.Column="0"
                                Width="{TemplateBinding ContentWidth}"
                                Height="{TemplateBinding ContentHeight}"
                                Margin="2,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Icon}"
                                Opacity="{DynamicResource Element.Opacity}" />

                            <!--  Remove later.  -->
                            <Viewbox
                                x:Name="ViewBoxInternal"
                                Grid.Column="0"
                                Width="{TemplateBinding ContentWidth}"
                                Height="{TemplateBinding ContentHeight}"
                                Margin="2,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Effect="{x:Null}"
                                Stretch="Uniform"
                                StretchDirection="Both">
                                <ContentPresenter
                                    Width="Auto"
                                    Height="Auto"
                                    Content="{TemplateBinding Image}"
                                    Opacity="{DynamicResource Element.Opacity}" />
                            </Viewbox>

                            <ContentPresenter
                                Grid.Column="1"
                                Margin="5,0,0,0"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Content}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <!--<TextBlock Grid.Column="2" Margin="5,5,5,3" HorizontalAlignment="Left" VerticalAlignment="Center">
                                <Run Text="•" Foreground="{DynamicResource Element.Foreground.Medium}"/>
                                <Run Text="{TemplateBinding MainAuthor}" Foreground="{DynamicResource Element.Foreground.Medium}" FontWeight="Bold" ToolTip="Current translator"/>
                                <Run Text="-" Foreground="{DynamicResource Element.Foreground.Medium}"/>
                                <Run Text="{TemplateBinding Author}" Foreground="{DynamicResource Element.Foreground.Gray112}"/>
                            </TextBlock>-->

                            <Label
                                Grid.Column="2"
                                Margin="5,0,0,0"
                                HorizontalAlignment="Left"
                                Content="{TemplateBinding Author}"
                                Foreground="{DynamicResource Element.Foreground.Gray112}" />

                            <Viewbox
                                x:Name="SelectionMark"
                                Grid.Column="3"
                                MaxWidth="{TemplateBinding ContentWidth}"
                                Margin="2,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Effect="{x:Null}"
                                Stretch="UniformToFill"
                                StretchDirection="Both"
                                Visibility="Collapsed">
                                <Path
                                    x:Name="optionMark"
                                    Margin="1"
                                    Data="F1 M 9.97498,.8 L 4.6983,9.09834  L 1,5.19331 L 1.27664,3.52165 L 4.255,6.08833 L 9.33331,1.288e-005 Z"
                                    Fill="{DynamicResource Element.Glyph}"
                                    Stretch="None" />
                            </Viewbox>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowMarkOnSelection" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="SelectionMark" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  NotificationBox Style  -->
    <Style TargetType="{x:Type n:NotificationBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Background" Value="{DynamicResource Panel.Background}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:NotificationBox}">
                    <Border
                        Margin="{TemplateBinding Margin}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource Element.Border}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Effect="{DynamicResource Shadow.Border.Dark}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <ScrollViewer
                                x:Name="MainScrollViewer"
                                Grid.Row="0"
                                Padding="{TemplateBinding Padding}"
                                Focusable="False"
                                VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter />
                            </ScrollViewer>

                            <TextBlock
                                x:Name="EllipsesTextBlock"
                                Grid.Row="0"
                                Height="46"
                                Margin="0,-30,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="40"
                                Foreground="{DynamicResource Element.Foreground.Gray112}"
                                Text="..."
                                Visibility="Collapsed" />

                            <Grid
                                x:Name="ControlGrid"
                                Grid.Row="1"
                                Background="{DynamicResource Panel.Background.Level2}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <TextBlock
                                    x:Name="NotificationTextBlock"
                                    Grid.Column="0"
                                    Margin="5"
                                    HorizontalAlignment="Center"
                                    FontSize="14"
                                    TextWrapping="Wrap">
                                    <Hyperlink x:Name="NotificationHyperlink">
                                        <Run Text="{DynamicResource S.Notifications.Dismiss}" />
                                    </Hyperlink>
                                </TextBlock>

                                <TextBlock
                                    x:Name="EncodingTextBlock"
                                    Grid.Column="1"
                                    Margin="5"
                                    HorizontalAlignment="Center"
                                    FontSize="14"
                                    TextWrapping="Wrap">
                                    <Hyperlink x:Name="EncodingHyperlink">
                                        <Run Text="{DynamicResource S.Encoder.Dismiss}" />
                                    </Hyperlink>
                                </TextBlock>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasAnyNotification" Value="False" />
                                <Condition Property="HasAnyEncoding" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="EllipsesTextBlock" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <Trigger Property="OnlyDisplayList" Value="True">
                            <Setter TargetName="ControlGrid" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="HasAnyNotification" Value="False">
                            <Setter TargetName="NotificationTextBlock" Property="IsEnabled" Value="False" />
                        </Trigger>

                        <Trigger Property="HasAnyEncoding" Value="False">
                            <Setter TargetName="EncodingTextBlock" Property="IsEnabled" Value="False" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExtendedProgressBar Style  -->
    <Style TargetType="{x:Type n:ExtendedProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource Brush.ProgressBar.Primary}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background.Back}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExtendedProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <Rectangle x:Name="PART_Track" />

                        <Grid
                            x:Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            ClipToBounds="True">
                            <Rectangle
                                x:Name="Indicator"
                                Fill="{TemplateBinding Foreground}" />
                            <Rectangle
                                x:Name="Animation"
                                Fill="{TemplateBinding Foreground}"
                                RenderTransformOrigin="0.5,0.5"
                                Visibility="Collapsed">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>

                        <Border
                            x:Name="PercentageBorder"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{DynamicResource Brush.ProgressBar.Detail}"
                            CornerRadius="5"
                            Visibility="Collapsed">
                            <TextBlock
                                x:Name="PercentageTextBlock"
                                Margin="3,0"
                                Padding="0"
                                VerticalAlignment="Center"
                                Foreground="{DynamicResource Element.Foreground}">
                                <TextBlock.Text>
                                    <MultiBinding
                                        Converter="{StaticResource ScaleConverter}"
                                        StringFormat="{}{0:P2}">
                                        <Binding
                                            Path="Value"
                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding
                                            Path="Maximum"
                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetName="Animation"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame
                                                KeyTime="0"
                                                Value="0.25" />
                                            <EasingDoubleKeyFrame
                                                KeyTime="0:0:1"
                                                Value="0.25" />
                                            <EasingDoubleKeyFrame
                                                KeyTime="0:0:2"
                                                Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames
                                            Storyboard.TargetName="Animation"
                                            Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame
                                                KeyTime="0"
                                                Value="-0.5,0.5" />
                                            <EasingPointKeyFrame
                                                KeyTime="0:0:1"
                                                Value="0.5,0.5" />
                                            <EasingPointKeyFrame
                                                KeyTime="0:0:2"
                                                Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="ShowPercentage" Value="True">
                            <Setter TargetName="PercentageBorder" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PercentageBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="State" Value="Info">
                            <Setter Property="Foreground" Value="{DynamicResource Brush.ProgressBar.Info}" />
                        </Trigger>

                        <Trigger Property="State" Value="Warning">
                            <Setter Property="Foreground" Value="{DynamicResource Brush.ProgressBar.Warning}" />
                        </Trigger>

                        <Trigger Property="State" Value="Danger">
                            <Setter Property="Foreground" Value="{DynamicResource Brush.ProgressBar.Danger}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  SelectControl Style  -->
    <Style TargetType="{x:Type n:SelectControlOld}">
        <Setter Property="Background" Value="#30000000" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:SelectControlOld}">
                    <Canvas
                        x:Name="MainCanvas"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <Canvas.Resources>
                            <Storyboard
                                x:Key="StrokeDashStoryboard"
                                x:Name="StrokeDashStoryboard">
                                <DoubleAnimationUsingKeyFrames
                                    BeginTime="00:00:00"
                                    RepeatBehavior="Forever"
                                    Storyboard.TargetName="MainPath"
                                    Storyboard.TargetProperty="(Shape.StrokeDashOffset)">
                                    <SplineDoubleKeyFrame
                                        KeyTime="00:00:00"
                                        Value="0" />
                                    <SplineDoubleKeyFrame
                                        KeyTime="00:00:00.6000000"
                                        Value="10" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Canvas.Resources>

                        <Canvas.Triggers>
                            <EventTrigger RoutedEvent="n:SelectControlOld.Loaded">
                                <BeginStoryboard Storyboard="{StaticResource StrokeDashStoryboard}" />
                            </EventTrigger>
                            <EventTrigger RoutedEvent="n:SelectControlOld.SelectionAccepted">
                                <StopStoryboard BeginStoryboardName="StrokeDashStoryboard" />
                            </EventTrigger>
                            <EventTrigger RoutedEvent="n:SelectControlOld.SelectionCanceled">
                                <StopStoryboard BeginStoryboardName="StrokeDashStoryboard" />
                            </EventTrigger>
                        </Canvas.Triggers>

                        <Path
                            x:Name="MainPath"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Fill="{TemplateBinding Background}"
                            Grid.ZIndex="0"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeDashArray="5"
                            StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <CombinedGeometry GeometryCombineMode="Exclude">
                                    <CombinedGeometry.Geometry1>
                                        <RectangleGeometry x:Name="ExternalRect">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding Converter="{StaticResource IntToRect}">
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="ActualWidth"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="ActualHeight"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry1>
                                    <CombinedGeometry.Geometry2>
                                        <RectangleGeometry x:Name="InternalRect">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding Converter="{StaticResource IntToRect}">
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="Selected.Width"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="Selected.Height"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="Selected.X"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="Selected.Y"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry2>
                                </CombinedGeometry>
                            </Path.Data>
                        </Path>

                        <Rectangle
                            x:Name="SelectRectangle"
                            Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left}"
                            Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top}"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height}"
                            Fill="#20FFFFFF"
                            Grid.ZIndex="1" />

                        <n:ExtendedUniformGrid
                            x:Name="StatusControlGrid"
                            Background="{DynamicResource Element.Background}"
                            Columns="3"
                            Cursor="Arrow"
                            Grid.ZIndex="9"
                            Visibility="Hidden">
                            <n:ExtendedButton
                                x:Name="AcceptButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="24"
                                ContentWidth="24"
                                Icon="{DynamicResource Vector.Ok}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Recorder.Accept}"
                                ToolTip="Enter"
                                ToolTipService.Placement="Bottom" />

                            <n:ExtendedButton
                                x:Name="RetryButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="24"
                                ContentWidth="24"
                                Icon="{DynamicResource Vector.Synchronize}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Recorder.Retry}"
                                ToolTip="{DynamicResource S.Recorder.Retry.Shortcut}"
                                ToolTipService.Placement="Bottom" />

                            <n:ExtendedButton
                                x:Name="CancelButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="24"
                                ContentWidth="24"
                                Icon="{DynamicResource Vector.Cancel}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Cancel}"
                                ToolTip="Esc"
                                ToolTipService.Placement="Bottom" />
                        </n:ExtendedUniformGrid>

                        <TextBlock
                            x:Name="SizeTextBlock"
                            Padding="2,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="#60000000"
                            FontSize="18"
                            Foreground="White"
                            Grid.ZIndex="1"
                            IsHitTestVisible="False"
                            Visibility="Hidden">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} × {1}">
                                    <Binding
                                        Path="NonExpandedSelection.Width"
                                        RelativeSource="{RelativeSource TemplatedParent}"
                                        UpdateSourceTrigger="PropertyChanged" />
                                    <Binding
                                        Path="NonExpandedSelection.Height"
                                        RelativeSource="{RelativeSource TemplatedParent}"
                                        UpdateSourceTrigger="PropertyChanged" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>

                        <Thumb
                            x:Name="TopLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="TopRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />

                        <Thumb
                            x:Name="TopThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="LeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="RightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />

                        <Grid
                            x:Name="ZoomGrid"
                            Width="120"
                            Height="140"
                            Background="#60000000"
                            Grid.ZIndex="8"
                            Visibility="Hidden">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="2" />
                                <RowDefinition />
                                <RowDefinition Height="20" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="2" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <Image
                                x:Name="CroppedImage"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                RenderOptions.BitmapScalingMode="NearestNeighbor"
                                RenderOptions.EdgeMode="Unspecified"
                                Stretch="UniformToFill"
                                UseLayoutRounding="True" />

                            <Rectangle
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Height="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="0"
                                Grid.Column="1"
                                Width="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="2"
                                Grid.Column="1"
                                Width="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />

                            <TextBlock
                                x:Name="ZoomTextBlock"
                                Grid.Row="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="AliceBlue"
                                Text="X: 1 Y: 2" />
                        </Grid>

                        <!--<Grid x:Name="RectGrid" Height="Auto" Width="Auto" Background="#60000000" Grid.ZIndex="9" Visibility="Hidden">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="MoveSizeWidgetGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Column="0" Padding="3,2" Text="Selection"/>
                                <n:ExtendedButton Grid.Column="1" x:Name="CloseSizeWidgetButton" Icon="{DynamicResource Vector.Cancel}" Style="{DynamicResource Style.Button.NoText.White}" Padding="2"/>
                            </Grid>

                            <Grid Grid.Row="1" Background="#20000000">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Row="0" Grid.Column="0" Padding="3,2" Text="Left:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="0" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left}"/>

                                <TextBlock Grid.Row="1" Grid.Column="0" Padding="3,2" Text="Top:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="1" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top}"/>

                                <TextBlock Grid.Row="2" Grid.Column="0" Padding="3,2" Text="Width:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="2" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width, Mode=TwoWay}"/>

                                <TextBlock Grid.Row="3" Grid.Column="0" Padding="3,2" Text="Height:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="3" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height, Mode=TwoWay}"/>
                            </Grid>
                        </Grid>-->
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <Trigger Property="FinishedSelection" Value="True">
                            <Setter TargetName="TopLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TopRightThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomRightThumb" Property="Visibility" Value="Visible" />

                            <Setter TargetName="TopThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="LeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RightThumb" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Mode" Value="Region">
                            <Setter TargetName="MainCanvas" Property="Cursor" Value="Cross" />
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="SizeAll" />
                        </Trigger>
                        <Trigger Property="Mode" Value="Window">
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="Mode" Value="Fullscreen">
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type n:SelectControl}">
        <Setter Property="Background" Value="#30000000" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:SelectControl}">
                    <ControlTemplate.Resources>
                        <Storyboard
                            x:Key="StrokeDashStoryboard"
                            x:Name="StrokeDashStoryboard">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                RepeatBehavior="Forever"
                                Storyboard.TargetName="MainPath"
                                Storyboard.TargetProperty="(Shape.StrokeDashOffset)">
                                <SplineDoubleKeyFrame
                                    KeyTime="00:00:00"
                                    Value="0" />
                                <SplineDoubleKeyFrame
                                    KeyTime="00:00:00.6"
                                    Value="10" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Canvas
                        x:Name="MainCanvas"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <Path
                            x:Name="MainPath"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Fill="{TemplateBinding Background}"
                            Grid.ZIndex="0"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeDashArray="5"
                            StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <CombinedGeometry GeometryCombineMode="Exclude">
                                    <CombinedGeometry.Geometry1>
                                        <RectangleGeometry x:Name="ExternalRect">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding
                                                    Converter="{StaticResource IntToRect}"
                                                    FallbackValue="0,0,0,0">
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="ActualWidth"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        Mode="OneWay"
                                                        Path="ActualHeight"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry1>
                                    <CombinedGeometry.Geometry2>
                                        <RectangleGeometry x:Name="InternalRect">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding
                                                    Converter="{StaticResource IntToRect}"
                                                    FallbackValue="0,0,0,0">
                                                    <Binding
                                                        FallbackValue="0"
                                                        Mode="OneWay"
                                                        Path="Selected.Width"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        FallbackValue="0"
                                                        Mode="OneWay"
                                                        Path="Selected.Height"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        FallbackValue="0"
                                                        Mode="OneWay"
                                                        Path="Selected.X"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding
                                                        FallbackValue="0"
                                                        Mode="OneWay"
                                                        Path="Selected.Y"
                                                        RelativeSource="{RelativeSource Mode=TemplatedParent}"
                                                        UpdateSourceTrigger="PropertyChanged" />
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry2>
                                </CombinedGeometry>
                            </Path.Data>
                        </Path>

                        <Rectangle
                            x:Name="SelectRectangle"
                            Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left, FallbackValue=0}"
                            Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top, FallbackValue=0}"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width, FallbackValue=0}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height, FallbackValue=0}"
                            Fill="#20FFFFFF"
                            Grid.ZIndex="1" />

                        <n:ExtendedUniformGrid
                            x:Name="StatusControlGrid"
                            Background="{DynamicResource Element.Background}"
                            Columns="3"
                            Cursor="Arrow"
                            Grid.ZIndex="9"
                            Visibility="Hidden">
                            <n:ExtendedButton
                                x:Name="AcceptButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="22"
                                ContentWidth="22"
                                Icon="{DynamicResource Vector.Ok}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Recorder.Accept}"
                                ToolTip="{DynamicResource S.Keys.Enter}"
                                ToolTipService.Placement="Bottom" />

                            <n:ExtendedButton
                                x:Name="RetryButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="22"
                                ContentWidth="22"
                                Icon="{DynamicResource Vector.Synchronize}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Recorder.Retry}"
                                ToolTip="{DynamicResource S.Mouse.Right}"
                                ToolTipService.Placement="Bottom" />

                            <n:ExtendedButton
                                x:Name="CancelButton"
                                Height="30"
                                Padding="4"
                                ContentHeight="22"
                                ContentWidth="22"
                                Icon="{DynamicResource Vector.Cancel}"
                                Style="{DynamicResource Style.Button.Horizontal.White}"
                                Text="{DynamicResource S.Cancel}"
                                ToolTip="{DynamicResource S.Keys.Esc}"
                                ToolTipService.Placement="Bottom" />
                        </n:ExtendedUniformGrid>

                        <Grid
                            x:Name="SizeGrid"
                            Background="#75000000"
                            Grid.ZIndex="1"
                            Visibility="Hidden">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <TextBlock
                                x:Name="SizeTextBlock"
                                Grid.Row="0"
                                Padding="2,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                IsHitTestVisible="False">
                                <Run
                                    FontSize="18"
                                    Foreground="White">
                                    <Run.Text>
                                        <MultiBinding StringFormat="{}{0} × {1}">
                                            <Binding
                                                Path="NonExpandedSelection.Width"
                                                RelativeSource="{RelativeSource TemplatedParent}"
                                                UpdateSourceTrigger="PropertyChanged" />
                                            <Binding
                                                Path="NonExpandedSelection.Height"
                                                RelativeSource="{RelativeSource TemplatedParent}"
                                                UpdateSourceTrigger="PropertyChanged" />
                                        </MultiBinding>
                                    </Run.Text>
                                </Run>

                                <Run
                                    x:Name="ScaleRun"
                                    FontSize="16"
                                    Foreground="Cyan"
                                    Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Scale, UpdateSourceTrigger=PropertyChanged, StringFormat={} ×{0:0.00}}" />
                            </TextBlock>

                            <TextBlock
                                x:Name="NativeSizeTextBlock"
                                Grid.Row="1"
                                Padding="2,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                IsHitTestVisible="False">
                                <Run
                                    FontSize="18"
                                    Foreground="White">
                                    <Run.Text>
                                        <MultiBinding StringFormat="{}{0} × {1}">
                                            <Binding
                                                Path="NonExpandedNativeSelection.Width"
                                                RelativeSource="{RelativeSource TemplatedParent}"
                                                UpdateSourceTrigger="PropertyChanged" />
                                            <Binding
                                                Path="NonExpandedNativeSelection.Height"
                                                RelativeSource="{RelativeSource TemplatedParent}"
                                                UpdateSourceTrigger="PropertyChanged" />
                                        </MultiBinding>
                                    </Run.Text>
                                </Run>

                                <Run
                                    FontSize="16"
                                    Foreground="Aqua"
                                    Text=" ×1.00" />
                            </TextBlock>
                        </Grid>

                        <Thumb
                            x:Name="TopLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="TopRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />

                        <Thumb
                            x:Name="TopThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="LeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="RightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Grid.ZIndex="2"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />

                        <Grid
                            x:Name="ZoomGrid"
                            Width="120"
                            Height="140"
                            Background="#60000000"
                            Grid.ZIndex="8"
                            Visibility="Hidden">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="2" />
                                <RowDefinition />
                                <RowDefinition Height="20" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="2" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <Image
                                x:Name="CroppedImage"
                                Grid.Row="0"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                RenderOptions.BitmapScalingMode="NearestNeighbor"
                                RenderOptions.EdgeMode="Unspecified"
                                Stretch="UniformToFill"
                                UseLayoutRounding="True" />

                            <Rectangle
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Height="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="1"
                                Grid.Column="2"
                                Height="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="0"
                                Grid.Column="1"
                                Width="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />
                            <Rectangle
                                Grid.Row="2"
                                Grid.Column="1"
                                Width="2"
                                Stroke="#6020FF00"
                                StrokeThickness="2" />

                            <TextBlock
                                x:Name="ZoomTextBlock"
                                Grid.Row="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="AliceBlue"
                                Text="X: 1 Y: 2" />
                        </Grid>

                        <!--<Grid x:Name="RectGrid" Height="Auto" Width="Auto" Background="#60000000" Grid.ZIndex="9" Visibility="Hidden">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0" x:Name="MoveSizeWidgetGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Column="0" Padding="3,2" Text="Selection"/>
                                <n:ExtendedButton Grid.Column="1" x:Name="CloseSizeWidgetButton" Icon="{DynamicResource Vector.Cancel}" Style="{DynamicResource Style.Button.NoText.White}" Padding="2"/>
                            </Grid>

                            <Grid Grid.Row="1" Background="#20000000">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Row="0" Grid.Column="0" Padding="3,2" Text="Left:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="0" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left}"/>

                                <TextBlock Grid.Row="1" Grid.Column="0" Padding="3,2" Text="Top:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="1" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top}"/>

                                <TextBlock Grid.Row="2" Grid.Column="0" Padding="3,2" Text="Width:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="2" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width, Mode=TwoWay}"/>

                                <TextBlock Grid.Row="3" Grid.Column="0" Padding="3,2" Text="Height:" VerticalAlignment="Center"/>
                                <n:IntegerBox Grid.Row="3" Grid.Column="1" Margin="2,1" MinWidth="60" HorizontalAlignment="Stretch" UpdateOnInput="False"
                                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height, Mode=TwoWay}"/>
                            </Grid>
                        </Grid>-->
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <Trigger Property="FinishedSelection" Value="True">
                            <Setter TargetName="TopLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TopRightThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomRightThumb" Property="Visibility" Value="Visible" />

                            <Setter TargetName="TopThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="LeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RightThumb" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="Mode" Value="Region">
                            <Setter TargetName="MainCanvas" Property="Cursor" Value="Cross" />
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="SizeAll" />
                        </Trigger>
                        <Trigger Property="Mode" Value="Window">
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="Mode" Value="Fullscreen">
                            <Setter TargetName="SelectRectangle" Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="Scale" Value="1">
                            <Setter TargetName="NativeSizeTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ScaleRun" Property="Text" Value="" />
                        </Trigger>
                        <Trigger Property="Selected" Value="{x:Static Rect.Empty}">
                            <Setter TargetName="SelectRectangle" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="AnimateBorder" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetName="MainPath"
                                            Storyboard.TargetProperty="(Shape.StrokeDashOffset)">
                                            <SplineDoubleKeyFrame
                                                KeyTime="00:00:00"
                                                Value="0" />
                                            <SplineDoubleKeyFrame
                                                KeyTime="00:00:00.6"
                                                Value="10" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  MoveResizeControl Style  -->
    <Style TargetType="{x:Type n:MoveResizeControl}">
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:MoveResizeControl}">
                    <Canvas
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        ClipToBounds="True">
                        <Border
                            x:Name="SelectBorder"
                            Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left}"
                            Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top}"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height}"
                            Cursor="SizeAll">
                            <ContentPresenter />
                        </Border>

                        <Rectangle
                            x:Name="DashedRectangle"
                            Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Left}"
                            Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Top}"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Width}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selected.Height}"
                            Stroke="#FFABABAB"
                            StrokeDashArray="5" />

                        <Thumb
                            x:Name="TopLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="TopRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomLeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNESW"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomRightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNWSE"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />

                        <Thumb
                            x:Name="TopThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="BottomThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeNS"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="LeftThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="RightThumb"
                            Width="10"
                            Height="10"
                            Cursor="SizeWE"
                            Style="{DynamicResource ScrollBar.Thumb}"
                            Visibility="Collapsed" />
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <Trigger Property="CanResize" Value="True">
                            <Setter TargetName="TopLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TopRightThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomLeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomRightThumb" Property="Visibility" Value="Visible" />

                            <Setter TargetName="TopThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="LeftThumb" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RightThumb" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="CanMove" Value="False">
                            <Setter TargetName="SelectBorder" Property="Cursor" Value="Arrow" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanResize" Value="False" />
                                <Condition Property="CanMove" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="DashedRectangle" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DrawingCanvas Style  -->
    <Style TargetType="{x:Type n:DrawingCanvas}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:DrawingCanvas}">
                    <Grid>
                        <Canvas
                            x:Name="MainCanvas"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}">
                            <Rectangle
                                x:Name="SelectionRectangle"
                                Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selection.Left}"
                                Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selection.Top}"
                                Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selection.Width}"
                                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Selection.Height}"
                                Panel.ZIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ControlsZIndex}"
                                Fill="#80737373"
                                Stroke="#FF737373"
                                StrokeThickness="1"
                                Tag="0" />
                        </Canvas>

                        <InkCanvas
                            x:Name="MainInkCanvas"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="Transparent"
                            Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="DrawingMode" Value="Shape">
                            <Setter Property="Cursor" Value="Cross" />
                            <Setter TargetName="SelectionRectangle" Property="Cursor" Value="SizeAll" />
                        </Trigger>
                        <Trigger Property="DrawingMode" Value="Select">
                            <Setter TargetName="SelectionRectangle" Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DisplayTimer Style  -->
    <Style TargetType="{x:Type n:DisplayTimer}">
        <Setter Property="Background" Value="DarkRed" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:DisplayTimer}">
                    <Border
                        x:Name="MainBorder"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderBrush}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <Border.ToolTip>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <TextBlock
                                    x:Name="ElapsedTooltipTextBlock"
                                    Grid.Row="0"
                                    Text="{DynamicResource S.Recorder.Timer.Elapsed}" />

                                <TextBlock
                                    x:Name="AutomaticTooltipTextBlock"
                                    Grid.Row="1">
                                    <Run Text="{DynamicResource S.Recorder.Timer.Total}" />
                                    <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CapturedCount, StringFormat={}{0:N0}}" />
                                </TextBlock>

                                <TextBlock
                                    x:Name="ManualTooltipTextBlock"
                                    Grid.Row="2">
                                    <Run Text="{DynamicResource S.Recorder.Timer.Manual}" />
                                    <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ManuallyCapturedCount, StringFormat={}{0:N0}}" />
                                </TextBlock>

                                <TextBlock
                                    x:Name="PausedTooltipTextBlock"
                                    Grid.Row="3"
                                    Margin="0,3,0,0"
                                    Text="{DynamicResource S.Recorder.Timer.Paused}"
                                    Visibility="Collapsed" />
                                <TextBlock
                                    x:Name="ImpreciseTooltipTextBlock"
                                    Grid.Row="3"
                                    Margin="0,3,0,0"
                                    FontWeight="SemiBold"
                                    Text="{DynamicResource S.Recorder.Timer.Imprecise}"
                                    Visibility="Collapsed" />
                            </Grid>
                        </Border.ToolTip>

                        <Grid
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border
                                x:Name="ImpreciseBorder"
                                Grid.Column="0"
                                Width="0"
                                Height="12"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{DynamicResource Vector.Warning}" />
                            <Border
                                x:Name="PauseBorder"
                                Grid.Column="1"
                                Width="0"
                                Height="12"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{DynamicResource Vector.Pause.Color}" />

                            <TextBlock
                                x:Name="NegativeTextBlock"
                                Grid.Column="2"
                                Margin="0"
                                Padding="0"
                                FontSize="14"
                                Text="-"
                                Visibility="Collapsed" />
                            <TextBlock
                                x:Name="ElapsedTextBlock"
                                Grid.Column="3"
                                Margin="0"
                                Padding="0"
                                FontSize="14"
                                Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Elapsed, Converter={StaticResource TimeSpanToString}}" />

                            <TextBlock
                                x:Name="ManualTextBlock"
                                Grid.Column="4"
                                Margin="2,0,0,0"
                                Padding="0"
                                FontSize="14"
                                Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ManuallyCapturedCount, StringFormat={}+{0:0}}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRunning" Value="False">
                            <Setter TargetName="MainBorder" Property="Opacity" Value="0.7" />
                        </Trigger>

                        <Trigger Property="IsPaused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="PauseBorder">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Width"
                                            From="0"
                                            To="12"
                                            Duration="0:0:0.1" />
                                        <ThicknessAnimation
                                            Storyboard.TargetProperty="Margin"
                                            From="0"
                                            To="0,0,3,0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="PauseBorder">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Width"
                                            From="12"
                                            Duration="0:0:0.1" />
                                        <ThicknessAnimation
                                            Storyboard.TargetProperty="Margin"
                                            From="0,0,3,0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>

                            <Setter TargetName="PausedTooltipTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsImpreciseCapture" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="ImpreciseBorder">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Width"
                                            From="0"
                                            To="12"
                                            Duration="0:0:0.1" />
                                        <ThicknessAnimation
                                            Storyboard.TargetProperty="Margin"
                                            From="0"
                                            To="0,0,3,0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard TargetName="ImpreciseBorder">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Width"
                                            From="12"
                                            Duration="0:0:0.1" />
                                        <ThicknessAnimation
                                            Storyboard.TargetProperty="Margin"
                                            From="0,0,3,0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>

                            <Setter TargetName="ImpreciseTooltipTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsNegative" Value="True">
                            <Setter TargetName="NegativeTextBlock" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="Elapsed" Value="{x:Static s:TimeSpan.Zero}">
                            <Setter TargetName="ElapsedTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ElapsedTooltipTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="ManuallyCapturedCount" Value="0">
                            <Setter TargetName="ManualTextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ManualTooltipTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="CapturedCount" Value="0">
                            <Setter TargetName="AutomaticTooltipTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Elapsed" Value="{x:Static s:TimeSpan.Zero}" />
                                <Condition Property="ManuallyCapturedCount" Value="0" />
                            </MultiTrigger.Conditions>

                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TimeBox Style  -->
    <Style TargetType="{x:Type n:TimeBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Element.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Element.Border}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:TimeBox}">
                    <Border
                        x:Name="border"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid x:Name="InnerGrid">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />

                            <Path
                                x:Name="InnerPath"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Bottom"
                                Data="M 0,0 6,6 0,6 z"
                                Fill="{DynamicResource Element.Border.Required}"
                                Opacity="0"
                                ToolTip="{DynamicResource S.Required}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsObligatory" Value="True" />
                                <Condition Property="Text" Value="{x:Static s:String.Empty}" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Required}" />
                            <Setter TargetName="InnerPath" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.ReadOnly}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Hover}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Hover}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Element.Border.Pressed}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Element.Background.Focused}" />
                            <Setter TargetName="InnerPath" Property="Fill" Value="{DynamicResource Element.Border.Pressed}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Buttons  -->
    <Style
        x:Key="Style.Button.TitleBar"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
        <Setter Property="IsTabStop" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Focusable="False"
                            RecognizesAccessKey="True" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Element.Background.Hover}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Element.Background.Pressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Gray150}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="Style.Button.TitleBar.Close"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
        <Setter Property="IsTabStop" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <Path
                            Width="46"
                            Height="32"
                            Margin="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="M 18,11 27,20 M 18,20 27,11"
                            Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                            StrokeThickness="1" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#C42B1C" />
                            <Setter Property="Foreground" Value="#FFFFFF" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#E6C42B1C" />
                            <Setter Property="Foreground" Value="#B3FFFFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Gray150}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Window  -->
    <Style TargetType="{x:Type n:ExWindow}">
        <Setter Property="Background" Value="{DynamicResource Panel.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type n:ExWindow}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Grid
                            x:Name="NonClientAreaElement"
                            Grid.Row="1"
                            Height="32"
                            VerticalAlignment="Top"
                            ZIndex="999">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Image
                                x:Name="IconImage"
                                Grid.Column="0"
                                Width="18"
                                Height="18"
                                Margin="10,4,5,4"
                                Source="{TemplateBinding Icon}" />

                            <TextBlock
                                x:Name="TitleTextBlock"
                                Grid.Column="1"
                                Margin="5,0,0,0"
                                VerticalAlignment="Center"
                                FontSize="12"
                                Foreground="{DynamicResource Element.Foreground}"
                                Text="{TemplateBinding Title}" />

                            <Grid
                                x:Name="CaptionButtonsGrid"
                                Grid.Column="2"
                                Visibility="Collapsed">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Button
                                    x:Name="MinimizeButton"
                                    Grid.Column="0"
                                    Width="46"
                                    Height="32"
                                    Margin="0,1,0,0"
                                    Command="SystemCommands.MinimizeWindowCommand"
                                    Style="{StaticResource Style.Button.TitleBar}">
                                    <Path
                                        Width="46"
                                        Height="32"
                                        Data="M 18,15 H 28"
                                        Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        StrokeThickness="1" />
                                </Button>

                                <Button
                                    x:Name="MaximizeButton"
                                    Grid.Column="1"
                                    Width="46"
                                    Height="32"
                                    Margin="0,1,0,0"
                                    Command="SystemCommands.MaximizeWindowCommand"
                                    Style="{StaticResource Style.Button.TitleBar}">
                                    <Path
                                        Width="46"
                                        Height="32"
                                        Data="M 18.5,10.5 H 27.5 V 19.5 H 18.5 Z"
                                        Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        StrokeThickness="1" />
                                </Button>

                                <Button
                                    x:Name="RestoreButton"
                                    Grid.Column="1"
                                    Width="46"
                                    Height="32"
                                    Margin="0,1,0,0"
                                    Command="SystemCommands.RestoreWindowCommand"
                                    Style="{StaticResource Style.Button.TitleBar}"
                                    Visibility="Collapsed">
                                    <Path
                                        Width="46"
                                        Height="32"
                                        Data="M 18.5,12.5 H 25.5 V 19.5 H 18.5 Z M 20.5,12.5 V 10.5 H 27.5 V 17.5 H 25.5"
                                        Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        StrokeThickness="1" />
                                </Button>

                                <Button
                                    x:Name="CloseButton"
                                    Grid.Column="2"
                                    Width="46"
                                    Height="32"
                                    Margin="0,1,1,0"
                                    Command="SystemCommands.CloseWindowCommand"
                                    Style="{StaticResource Style.Button.TitleBar.Close}" />
                            </Grid>
                        </Grid>

                        <Border
                            Grid.Row="1"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <AdornerDecorator>
                                <ContentPresenter />
                            </AdornerDecorator>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="TitleTextBlock" Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}" />
                        </Trigger>

                        <Trigger Property="ExtendIntoTitleBar" Value="True">
                            <Setter TargetName="IconImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="TitleTextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="ExtendIntoTitleBar" Value="False">
                            <Setter TargetName="NonClientAreaElement" Property="Grid.Row" Value="0" />
                            <Setter Property="Padding" Value="4,2" />
                        </Trigger>

                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="NonClientAreaElement" Property="Margin" Value="8,8,8,0" />
                            <Setter Property="Padding" Value="8,0,8,8" />
                        </Trigger>

                        <Trigger Property="WillRenderCustomCaptionButtons" Value="True">
                            <Setter TargetName="CaptionButtonsGrid" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="ShowMinimizeButton" Value="False">
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="ShowMaximizeButton" Value="False">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowMaximizeButton" Value="True" />
                                <Condition Property="WindowState" Value="Maximized" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowMaximizeButton" Value="True" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>